{
    "cells": [
        {
            "id": "1",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "---\n",
                "title: Dataset 58 - Function at nodal DOF\n",
                "format:\n",
                "  html:\n",
                "    toc: true\n",
                "    number-sections: true\n",
                "engine: julia\n",
                "execute:\n",
                "  freeze: auto\n",
                "  cache: true\n",
                "---"
            ]
        },
        {
            "id": "2",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| echo: false\n",
                "#| output: false\n",
                "using UFFio"
            ],
            "outputs": [
            ],
            "execution_count": 1
        },
        {
            "id": "3",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## Dataset description"
            ]
        },
        {
            "id": "4",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| echo: false\n",
                "@doc UFFio.parse_dataset58"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "  Universal Dataset Number: 58\n\n  \u001b[1mName: Function at Nodal DOF\u001b[22m\n\n  \u001b[36m     Record 1:     Format(80A1)\u001b[39m\n  \u001b[36m                   Field 1    - ID Line 1\u001b[39m\n  \n  \u001b[36m                                             NOTE\u001b[39m\n  \n  \u001b[36m                       ID Line 1 is generally  used  for  the function\u001b[39m\n  \u001b[36m                       description.\u001b[39m\n  \n  \n  \u001b[36m     Record 2:     Format(80A1)\u001b[39m\n  \u001b[36m                   Field 1    - ID Line 2\u001b[39m\n  \n  \u001b[36m     Record 3:     Format(80A1)\u001b[39m\n  \u001b[36m                   Field 1    - ID Line 3\u001b[39m\n  \n  \u001b[36m                                             NOTE\u001b[39m\n  \n  \u001b[36m                       ID Line 3 is generally used to identify when the\u001b[39m\n  \u001b[36m                       \u001b[31mfunction\u001b[36m  was  created.  The date is in the form\u001b[39m\n  \u001b[36m                       DD-MMM-YY, and the time is in the form HH:MM:SS,\u001b[39m\n  \u001b[36m                       with a general Format(9A1,1X,8A1).\u001b[39m\n  \n  \u001b[36m     Record 4:     Format(80A1)\u001b[39m\n  \u001b[36m                   Field 1    - ID Line 4\u001b[39m\n  \n  \u001b[36m     Record 5:     Format(80A1)\u001b[39m\n  \u001b[36m                   Field 1    - ID Line 5\u001b[39m\n  \n  \u001b[36m     Record 6:     Format(2(I5,I10),2(1X,10A1,I10,I4))\u001b[39m\n  \u001b[36m                              DOF Identification\u001b[39m\n  \u001b[36m                   Field 1    - Function Type\u001b[39m\n  \u001b[36m                                0 - General or Unknown\u001b[39m\n  \u001b[36m                                1 - Time Response\u001b[39m\n  \u001b[36m                                2 - Auto Spectrum\u001b[39m\n  \u001b[36m                                3 - Cross Spectrum\u001b[39m\n  \u001b[36m                                4 - Frequency Response Function\u001b[39m\n  \u001b[36m                                5 - Transmissibility\u001b[39m\n  \u001b[36m                                6 - Coherence\u001b[39m\n  \u001b[36m                                7 - Auto Correlation\u001b[39m\n  \u001b[36m                                8 - Cross Correlation\u001b[39m\n  \u001b[36m                                9 - Power Spectral Density (PSD)\u001b[39m\n  \u001b[36m                                10 - Energy Spectral Density (ESD)\u001b[39m\n  \u001b[36m                                11 - Probability Density Function\u001b[39m\n  \u001b[36m                                12 - Spectrum\u001b[39m\n  \u001b[36m                                13 - Cumulative Frequency Distribution\u001b[39m\n  \u001b[36m                                14 - Peaks Valley\u001b[39m\n  \u001b[36m                                15 - Stress/Cycles\u001b[39m\n  \u001b[36m                                16 - Strain/Cycles\u001b[39m\n  \u001b[36m                                17 - Orbit\u001b[39m\n  \u001b[36m                                18 - Mode Indicator Function\u001b[39m\n  \u001b[36m                                19 - Force Pattern\u001b[39m\n  \u001b[36m                                20 - Partial Power\u001b[39m\n  \u001b[36m                                21 - Partial Coherence\u001b[39m\n  \u001b[36m                                22 - Eigenvalue\u001b[39m\n  \u001b[36m                                23 - Eigenvector\u001b[39m\n  \u001b[36m                                24 - Shock Response Spectrum\u001b[39m\n  \u001b[36m                                25 - Finite Impulse Response Filter\u001b[39m\n  \u001b[36m                                26 - Multiple Coherence\u001b[39m\n  \u001b[36m                                27 - Order Function\u001b[39m\n  \u001b[36m                   Field 2    - Function Identification Number\u001b[39m\n  \u001b[36m                   Field 3    - Version Number, or sequence number\u001b[39m\n  \u001b[36m                   Field 4    - Load Case Identification Number\u001b[39m\n  \u001b[36m                                0 - Single Point Excitation\u001b[39m\n  \u001b[36m                   Field 5    - Response Entity Name (\u001b[32m\"\u001b[32mNONE\u001b[32m\"\u001b[36m if unused)\u001b[39m\n  \u001b[36m                   Field 6    - Response Node\u001b[39m\n  \u001b[36m                   Field 7    - Response Direction\u001b[39m\n  \u001b[36m                                 0 - Scalar\u001b[39m\n  \u001b[36m                                 1 - +X Translation       4 - +X Rotation\u001b[39m\n  \u001b[36m                                -1 - -X Translation      -4 - -X Rotation\u001b[39m\n  \u001b[36m                                 2 - +Y Translation       5 - +Y Rotation\u001b[39m\n  \u001b[36m                                -2 - -Y Translation      -5 - -Y Rotation\u001b[39m\n  \u001b[36m                                 3 - +Z Translation       6 - +Z Rotation\u001b[39m\n  \u001b[36m                                -3 - -Z Translation      -6 - -Z Rotation\u001b[39m\n  \u001b[36m                   Field 8    - Reference Entity Name (\u001b[32m\"\u001b[32mNONE\u001b[32m\"\u001b[36m if unused)\u001b[39m\n  \u001b[36m                   Field 9    - Reference Node\u001b[39m\n  \u001b[36m                   Field 10   - Reference Direction  (same as field 7)\u001b[39m\n  \n  \u001b[36m                                             NOTE\u001b[39m\n  \n  \u001b[36m                       Fields 8, 9, and 10 are only relevant if field 4\u001b[39m\n  \u001b[36m                       is zero.\u001b[39m\n  \n  \u001b[36m     Record 7:     Format(3I10,3E13.5)\u001b[39m\n  \u001b[36m                              Data Form\u001b[39m\n  \u001b[36m                   Field 1    - Ordinate Data Type\u001b[39m\n  \u001b[36m                                2 - real, single precision\u001b[39m\n  \u001b[36m                                4 - real, double precision\u001b[39m\n  \u001b[36m                                5 - complex, single precision\u001b[39m\n  \u001b[36m                                6 - complex, double precision\u001b[39m\n  \u001b[36m                   Field 2    - Number of data pairs for uneven abscissa\u001b[39m\n  \u001b[36m                                spacing, or number of data values for even\u001b[39m\n  \u001b[36m                                abscissa spacing\u001b[39m\n  \u001b[36m                   Field 3    - Abscissa Spacing\u001b[39m\n  \u001b[36m                                0 - uneven\u001b[39m\n  \u001b[36m                                1 - even (no abscissa values stored)\u001b[39m\n  \u001b[36m                   Field 4    - Abscissa minimum (0.0 if spacing uneven)\u001b[39m\n  \u001b[36m                   Field 5    - Abscissa increment (0.0 if spacing uneven)\u001b[39m\n  \u001b[36m                   Field 6    - Z-axis value (0.0 if unused)\u001b[39m\n  \n  \u001b[36m     Record 8:     Format(I10,3I5,2(1X,20A1))\u001b[39m\n  \u001b[36m                              Abscissa Data Characteristics\u001b[39m\n  \u001b[36m                   Field 1    - Specific Data Type\u001b[39m\n  \u001b[36m                                0 - unknown\u001b[39m\n  \u001b[36m                                1 - general\u001b[39m\n  \u001b[36m                                2 - stress\u001b[39m\n  \u001b[36m                                3 - strain\u001b[39m\n  \u001b[36m                                5 - temperature\u001b[39m\n  \u001b[36m                                6 - heat flux\u001b[39m\n  \u001b[36m                                8 - displacement\u001b[39m\n  \u001b[36m                                9 - reaction force\u001b[39m\n  \u001b[36m                                11 - velocity\u001b[39m\n  \u001b[36m                                12 - acceleration\u001b[39m\n  \u001b[36m                                13 - excitation force\u001b[39m\n  \u001b[36m                                15 - pressure\u001b[39m\n  \u001b[36m                                16 - mass\u001b[39m\n  \u001b[36m                                17 - time\u001b[39m\n  \u001b[36m                                18 - frequency\u001b[39m\n  \u001b[36m                                19 - rpm\u001b[39m\n  \u001b[36m                                20 - order\u001b[39m\n  \u001b[36m                   Field 2    - Length units exponent\u001b[39m\n  \u001b[36m                   Field 3    - Force units exponent\u001b[39m\n  \u001b[36m                   Field 4    - Temperature units exponent\u001b[39m\n  \n  \u001b[36m                    NOTE\u001b[39m\n  \n  \u001b[36m                       Fields 2, 3 and  4  are  relevant  only  if the\u001b[39m\n  \u001b[36m                       Specific Data Type is General, or in the case of\u001b[39m\n  \u001b[36m                       ordinates, the response/reference direction is a\u001b[39m\n  \u001b[36m                       scalar, or the functions are being used for\u001b[39m\n  \u001b[36m                       nonlinear connectors in System Dynamics Analysis.\u001b[39m\n  \u001b[36m                       See Addendum \u001b[32m'\u001b[32mA\u001b[32m'\u001b[36m for the units exponent table.\u001b[39m\n  \n  \u001b[36m                   Field 5    - Axis label (\u001b[32m\"\u001b[32mNONE\u001b[32m\"\u001b[36m if not used)\u001b[39m\n  \u001b[36m                   Field 6    - Axis units label (\u001b[32m\"\u001b[32mNONE\u001b[32m\"\u001b[36m if not used)\u001b[39m\n  \n  \u001b[36m                    NOTE\u001b[39m\n  \n  \u001b[36m                       If fields  5  and  6  are  supplied,  they take\u001b[39m\n  \u001b[36m                       precendence  over  program  generated labels and\u001b[39m\n  \u001b[36m                       units.\u001b[39m\n  \n  \u001b[36m     Record 9:     Format(I10,3I5,2(1X,20A1))\u001b[39m\n  \u001b[36m                   Ordinate (or ordinate numerator) Data Characteristics\u001b[39m\n  \n  \u001b[36m     Record 10:    Format(I10,3I5,2(1X,20A1))\u001b[39m\n  \u001b[36m                   Ordinate Denominator Data Characteristics\u001b[39m\n  \n  \u001b[36m     Record 11:    Format(I10,3I5,2(1X,20A1))\u001b[39m\n  \u001b[36m                   Z-axis Data Characteristics\u001b[39m\n  \n  \u001b[36m                    NOTE\u001b[39m\n  \n  \u001b[36m                       Records 9, 10, and 11 are  always  included and\u001b[39m\n  \u001b[36m                       have fields the same as record 8.  If records 10\u001b[39m\n  \u001b[36m                       and 11 are not used, set field 1 to zero.\u001b[39m\n  \n  \u001b[36m     Record 12:\u001b[39m\n  \u001b[36m                               Data Values\u001b[39m\n  \n  \u001b[36m                     Ordinate            Abscissa\u001b[39m\n  \u001b[36m         Case     Type     Precision     Spacing       Format\u001b[39m\n  \u001b[36m       -------------------------------------------------------------\u001b[39m\n  \u001b[36m           1      real      single        even         6E13.5\u001b[39m\n  \u001b[36m           2      real      single       uneven        6E13.5\u001b[39m\n  \u001b[36m           3     complex    single        even         6E13.5\u001b[39m\n  \u001b[36m           4     complex    single       uneven        6E13.5\u001b[39m\n  \u001b[36m           5      real      double        even         4E20.12\u001b[39m\n  \u001b[36m           6      real      double       uneven     2(E13.5,E20.12)\u001b[39m\n  \u001b[36m           7     complex    double        even         4E20.12\u001b[39m\n  \u001b[36m           8     complex    double       uneven      E13.5,2E20.12\u001b[39m\n  \u001b[36m       --------------------------------------------------------------\u001b[39m\n  \n  \u001b[36m        NOTE\u001b[39m\n  \n  \u001b[36m       See  Addendum  \u001b[32m'\u001b[32mB\u001b[32m'\u001b[36m  for  typical  FORTRAN   READ/WRITE\u001b[39m\n  \u001b[36m       statements for each case.\u001b[39m\n  \n  \n  \u001b[36m     General Notes:\u001b[39m\n  \n  \u001b[36m          1.  ID lines may not be blank.  If no  information  is required,\u001b[39m\n  \u001b[36m              the word \u001b[32m\"\u001b[32mNONE\u001b[32m\"\u001b[36m must appear in columns 1 through 4.\u001b[39m\n  \n  \u001b[36m          2.  ID line 1 appears on plots in Finite Element Modeling and is\u001b[39m\n  \u001b[36m              used as the function description in System Dynamics Analysis.\u001b[39m\n  \n  \u001b[36m          3.  Dataloaders use the following ID line conventions\u001b[39m\n  \u001b[36m                 ID Line 1 - Model Identification\u001b[39m\n  \u001b[36m                 ID Line 2 - Run Identification\u001b[39m\n  \u001b[36m                 ID Line 3 - Run Date and Time\u001b[39m\n  \u001b[36m                 ID Line 4 - Load Case Name\u001b[39m\n  \n  \u001b[36m          4.  Coordinates codes from MODAL-PLUS and MODALX are decoded into\u001b[39m\n  \u001b[36m              node and direction.\u001b[39m\n  \n  \u001b[36m          5.  Entity names used in System Dynamics Analysis prior to I-DEAS\u001b[39m\n  \u001b[36m              Level 5 have a 4 character maximum. Beginning with Level 5,\u001b[39m\n  \u001b[36m              entity names will be ignored if this dataset is preceded by\u001b[39m\n  \u001b[36m              dataset 259. If no dataset 259 precedes this dataset, then the\u001b[39m\n  \u001b[36m              entity name will be assumed to exist in model bin number 1.\u001b[39m\n  \n  \u001b[36m          6.  Record 10 is ignored by System Dynamics Analysis unless load\u001b[39m\n  \u001b[36m              case = 0. Record 11 is always ignored by System Dynamics\u001b[39m\n  \u001b[36m              Analysis.\u001b[39m\n  \n  \u001b[36m          7.  In record 6, if the response or reference names are \u001b[32m\"\u001b[32mNONE\u001b[32m\"\u001b[39m\n  \u001b[36m              and are not overridden by a dataset 259, but the correspond-\u001b[39m\n  \u001b[36m              ing node is non-zero, System Dynamics Analysis adds the node\u001b[39m\n  \u001b[36m              and direction to the function description if space is sufficie\u001b[39m\n  \n  \u001b[36m          8.  ID line 1 appears on XY plots in Test Data Analysis along\u001b[39m\n  \u001b[36m              with ID line 5 if it is defined.  If defined, the axis units\u001b[39m\n  \u001b[36m              labels also appear on the XY plot instead of the normal\u001b[39m\n  \u001b[36m              labeling based on the data type of the function.\u001b[39m\n  \n  \u001b[36m          9.  For functions used with nonlinear connectors in System\u001b[39m\n  \u001b[36m              Dynamics Analysis, the following requirements must be\u001b[39m\n  \u001b[36m              adhered to:\u001b[39m\n  \n  \u001b[36m              a\u001b[41m)\u001b[49m Record 6: For a displacement-dependent function, the\u001b[39m\n  \u001b[36m                 \u001b[31mfunction\u001b[36m type must be 0; for a frequency-dependent\u001b[39m\n  \u001b[36m                 function, it must be 4. In either case, the load case\u001b[39m\n  \u001b[36m                 identification number must be 0.\u001b[39m\n  \n  \u001b[36m              b) Record 8: For a displacement-dependent function, the\u001b[39m\n  \u001b[36m                 specific data type must be 8 and the length units\u001b[39m\n  \u001b[36m                 exponent must be 0 or 1; for a frequency-dependent\u001b[39m\n  \u001b[36m                 \u001b[31mfunction\u001b[36m, the specific data type must be 18 and the\u001b[39m\n  \u001b[36m                 length units exponent must be 0. In either case, the\u001b[39m\n  \u001b[36m                 other units exponents must be 0.\u001b[39m\n  \n  \u001b[36m              c) Record 9: The specific data type must be 13. The\u001b[39m\n  \u001b[36m                 temperature units exponent must be 0. For an ordinate\u001b[39m\n  \u001b[36m                 numerator of force, the length and force units\u001b[39m\n  \u001b[36m                 exponents must be 0 and 1, respectively. For an\u001b[39m\n  \u001b[36m                 ordinate numerator of moment, the length and force\u001b[39m\n  \u001b[36m                 units exponents must be 1 and 1, respectively.\u001b[39m\n  \n  \u001b[36m              d) Record 10: The specific data type must be 8 for\u001b[39m\n  \u001b[36m                 stiffness and hysteretic damping; it must be 11\u001b[39m\n  \u001b[36m                 \u001b[31mfor viscous damping. For an ordinate denominator of\u001b[39m\n  \u001b[36m                 translational displacement, the length units exponent\u001b[39m\n  \u001b[36m                 must be 1; for a rotational displacement, it must\u001b[39m\n  \u001b[36m                 be 0. The other units exponents must be 0.\u001b[39m\n  \n  \u001b[36m              e) Dataset 217 must precede each function in order to\u001b[39m\n  \u001b[36m                 define the function's usage (i.e. stiffness, viscous\u001b[39m\n  \u001b[36m                 damping, hysteretic damping).\u001b[39m\n  \n  \u001b[36m    Addendum A\u001b[39m\n  \n  \u001b[36m     In order to correctly perform units  conversion,  length,  force, and\u001b[39m\n  \u001b[36m     temperature  exponents  must  be  supplied for a specific data type of\u001b[39m\n  \u001b[36m     General; that is, Record 8 Field 1 = 1.  For example, if the function\u001b[39m\n  \u001b[36m     has  the  physical dimensionality of Energy (Force * Length), then the\u001b[39m\n  \u001b[36m     required exponents would be as follows:\u001b[39m\n  \n  \u001b[36m             Length = 1\u001b[39m\n  \u001b[36m             Force = 1          Energy = L * F\u001b[39m\n  \u001b[36m             Temperature = 0\u001b[39m\n  \n  \u001b[36m     Units exponents for the remaining specific data types  should not  be\u001b[39m\n  \u001b[36m     supplied.  The following exponents will automatically be used.\u001b[39m\n  \n  \u001b[36m                          Table - Unit Exponents\u001b[39m\n  \u001b[36m          -------------------------------------------------------\u001b[39m\n  \u001b[36m           Specific                   Direction\u001b[39m\n  \u001b[36m                    ---------------------------------------------\u001b[39m\n  \u001b[36m             Data       Translational            Rotational\u001b[39m\n  \u001b[36m                    ---------------------------------------------\u001b[39m\n  \u001b[36m             Type    Length  Force  Temp    Length  Force  Temp\u001b[39m\n  \u001b[36m          -------------------------------------------------------\u001b[39m\n  \u001b[36m              0        0       0      0       0       0      0\u001b[39m\n  \u001b[36m              1             (requires input to fields 2,3,4)\u001b[39m\n  \u001b[36m              2       -2       1      0      -1       1      0\u001b[39m\n  \u001b[36m              3        0       0      0       0       0      0\u001b[39m\n  \u001b[36m              5        0       0      1       0       0      1\u001b[39m\n  \u001b[36m              6        1       1      0       1       1      0\u001b[39m\n  \u001b[36m              8        1       0      0       0       0      0\u001b[39m\n  \u001b[36m              9        0       1      0       1       1      0\u001b[39m\n  \u001b[36m             11        1       0      0       0       0      0\u001b[39m\n  \u001b[36m             12        1       0      0       0       0      0\u001b[39m\n  \u001b[36m             13        0       1      0       1       1      0\u001b[39m\n  \u001b[36m             15       -2       1      0      -1       1      0\u001b[39m\n  \u001b[36m             16       -1       1      0       1       1      0\u001b[39m\n  \u001b[36m             17        0       0      0       0       0      0\u001b[39m\n  \u001b[36m             18        0       0      0       0       0      0\u001b[39m\n  \u001b[36m             19        0       0      0       0       0      0\u001b[39m\n  \u001b[36m          --------------------------------------------------------\u001b[39m\n  \n  \u001b[36m            NOTE\u001b[39m\n  \n  \u001b[36m             Units exponents for scalar points are defined within\u001b[39m\n  \u001b[36m             System Analysis prior to reading this dataset.\u001b[39m\n  \n  \u001b[36m    Addendum B\u001b[39m\n  \n  \u001b[36m     There are 8 distinct  combinations  of  parameters  which  affect the\u001b[39m\n  \u001b[36m     details   of  READ/WRITE  operations.   The  parameters  involved are\u001b[39m\n  \u001b[36m     Ordinate Data Type, Ordinate Data  Precision,  and  Abscissa Spacing.\u001b[39m\n  \u001b[36m     Each  combination  is documented in the examples below.  In all cases,\u001b[39m\n  \u001b[36m     the number of data values (for even abscissa spacing)  or  data pairs\u001b[39m\n  \u001b[36m     (for  uneven  abscissa  spacing)  is NVAL.  The abcissa is always real\u001b[39m\n  \u001b[36m     single precision.  Complex double precision is  handled  by  two real\u001b[39m\n  \u001b[36m     double  precision  variables  (real  part  followed by imaginary part)\u001b[39m\n  \u001b[36m     because most systems do not directly support complex double precision.\u001b[39m\n  \n  \u001b[36m     CASE 1\u001b[39m\n  \n  \u001b[36m     REAL\u001b[39m\n  \u001b[36m     SINGLE PRECISION\u001b[39m\n  \u001b[36m     EVEN SPACING\u001b[39m\n  \n  \u001b[36m       Order of data in file           Y1   Y2   Y3   Y4   Y5   Y6\u001b[39m\n  \u001b[36m                                       Y7   Y8   Y9   Y10  Y11  Y12\u001b[39m\n  \u001b[36m                                                  .\u001b[39m\n  \u001b[36m                                                  .\u001b[39m\n  \u001b[36m                                                  .\u001b[39m\n  \u001b[36m       Input\u001b[39m\n  \n  \u001b[36m                 REAL Y(6)\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 NPRO=0\u001b[39m\n  \u001b[36m              10 READ(LUN,1000,ERR=  ,END=  )(Y(I),I=1,6)\u001b[39m\n  \u001b[36m            1000 FORMAT(6E13.5)\u001b[39m\n  \u001b[36m                 NPRO=NPRO+6\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .    code to process these six values\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 IF(NPRO.LT.NVAL)GO TO 10\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .   continued processing\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \n  \u001b[36m       Output\u001b[39m\n  \n  \u001b[36m                 REAL Y(6)\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 NPRO=0\u001b[39m\n  \u001b[36m              10 CONTINUE\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .    code to set up these six values\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 WRITE(LUN,1000,ERR=  )(Y(I),I=1,6)\u001b[39m\n  \u001b[36m            1000 FORMAT(6E13.5)\u001b[39m\n  \u001b[36m                 NPRO=NPRO+6\u001b[39m\n  \n  \u001b[36m                 IF(NPRO.LT.NVAL)GO TO 10\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .   continued processing\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \n  \u001b[36m     CASE 2\u001b[39m\n  \n  \u001b[36m     REAL\u001b[39m\n  \u001b[36m     SINGLE PRECISION\u001b[39m\n  \u001b[36m     UNEVEN SPACING\u001b[39m\n  \n  \u001b[36m       Order of data in file          X1   Y1   X2   Y2   X3   Y3\u001b[39m\n  \u001b[36m                                      X4   Y4   X5   Y5   X6   Y6\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \n  \u001b[36m       Input\u001b[39m\n  \n  \u001b[36m                 REAL X(3),Y(3)\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 NPRO=0\u001b[39m\n  \u001b[36m              10 READ(LUN,1000,ERR=  ,END=  )(X(I),Y(I),I=1,3)\u001b[39m\n  \u001b[36m            1000 FORMAT(6E13.5)\u001b[39m\n  \u001b[36m                 NPRO=NPRO+3\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .    code to process these three values\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 IF(NPRO.LT.NVAL)GO TO 10\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .   continued processing\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \n  \u001b[36m       Output\u001b[39m\n  \n  \u001b[36m                 REAL X(3),Y(3)\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 NPRO=0\u001b[39m\n  \u001b[36m              10 CONTINUE\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .    code to set up these three values\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 WRITE(LUN,1000,ERR=  )(X(I),Y(I),I=1,3)\u001b[39m\n  \u001b[36m            1000 FORMAT(6E13.5)\u001b[39m\n  \u001b[36m                 NPRO=NPRO+3\u001b[39m\n  \u001b[36m                 IF(NPRO.LT.NVAL)GO TO 10\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .   continued processing\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \n  \u001b[36m     CASE 3\u001b[39m\n  \n  \u001b[36m     COMPLEX\u001b[39m\n  \u001b[36m     SINGLE PRECISION\u001b[39m\n  \u001b[36m     EVEN SPACING\u001b[39m\n  \n  \u001b[36m       Order of data in file          RY1  IY1  RY2  IY2  RY3  IY3\u001b[39m\n  \u001b[36m                                      RY4  IY4  RY5  IY5  RY6  IY6\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \n  \u001b[36m       Input\u001b[39m\n  \n  \u001b[36m                 COMPLEX Y(3)\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 NPRO=0\u001b[39m\n  \u001b[36m              10 READ(LUN,1000,ERR=  ,END=  )(Y(I),I=1,3)\u001b[39m\n  \u001b[36m            1000 FORMAT(6E13.5)\u001b[39m\n  \u001b[36m                 NPRO=NPRO+3\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .    code to process these six values\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 IF(NPRO.LT.NVAL)GO TO 10\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .   continued processing\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \n  \n  \u001b[36m       Output\u001b[39m\n  \n  \u001b[36m                 COMPLEX Y(3)\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 NPRO=0\u001b[39m\n  \u001b[36m              10 CONTINUE\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .    code to set up these three values\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 WRITE(LUN,1000,ERR=  )(Y(I),I=1,3)\u001b[39m\n  \u001b[36m            1000 FORMAT(6E13.5)\u001b[39m\n  \u001b[36m                 NPRO=NPRO+3\u001b[39m\n  \u001b[36m                 IF(NPRO.LT.NVAL)GO TO 10\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .   continued processing\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \n  \u001b[36m     CASE 4\u001b[39m\n  \n  \u001b[36m     COMPLEX\u001b[39m\n  \u001b[36m     SINGLE PRECISION\u001b[39m\n  \u001b[36m     UNEVEN SPACING\u001b[39m\n  \n  \u001b[36m       Order of data in file          X1   RY1  IY1  X2  RY2  IY2\u001b[39m\n  \u001b[36m                                      X3   RY3  IY3  X4  RY4  IY4\u001b[39m\n  \n  \u001b[36m                                       .\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \n  \u001b[36m       Input\u001b[39m\n  \n  \u001b[36m                 REAL X(2)\u001b[39m\n  \u001b[36m                 COMPLEX Y(2)\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 NPRO=0\u001b[39m\n  \u001b[36m              10 READ(LUN,1000,ERR=  ,END=  )(X(I),Y(I),I=1,2)\u001b[39m\n  \u001b[36m            1000 FORMAT(6E13.5)\u001b[39m\n  \u001b[36m                 NPRO=NPRO+2\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .    code to process these two values\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 IF(NPRO.LT.NVAL)GO TO 10\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .   continued processing\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \n  \u001b[36m      Output\u001b[39m\n  \n  \u001b[36m                 REAL X(2)\u001b[39m\n  \u001b[36m                 COMPLEX Y(2)\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 NPRO=0\u001b[39m\n  \u001b[36m              10 CONTINUE\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .    code to set up these two values\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 WRITE(LUN,1000,ERR=  )(X(I),Y(I),I=1,2)\u001b[39m\n  \u001b[36m            1000 FORMAT(6E13.5)\u001b[39m\n  \u001b[36m                 NPRO=NPRO+2\u001b[39m\n  \u001b[36m                 IF(NPRO.LT.NVAL)GO TO 10\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .   continued processing\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \n  \u001b[36m     CASE 5\u001b[39m\n  \n  \u001b[36m     REAL\u001b[39m\n  \u001b[36m     DOUBLE PRECISION\u001b[39m\n  \u001b[36m     EVEN SPACING\u001b[39m\n  \n  \u001b[36m       Order of data in file          Y1     Y2     Y3     Y4\u001b[39m\n  \u001b[36m                                      Y5     Y6     Y7     Y8\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \u001b[36m       Input\u001b[39m\n  \n  \u001b[36m                 DOUBLE PRECISION Y(4)\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 NPRO=0\u001b[39m\n  \u001b[36m              10 READ(LUN,1000,ERR=  ,END=  )(Y(I),I=1,4)\u001b[39m\n  \u001b[36m            1000 FORMAT(4E20.12)\u001b[39m\n  \u001b[36m                 NPRO=NPRO+4\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .    code to process these four values\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 IF(NPRO.LT.NVAL)GO TO 10\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .   continued processing\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \n  \u001b[36m       Output\u001b[39m\n  \n  \u001b[36m                 DOUBLE PRECISION Y(4)\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 NPRO=0\u001b[39m\n  \u001b[36m              10 CONTINUE\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .    code to set up these four values\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 WRITE(LUN,1000,ERR=  )(Y(I),I=1,4)\u001b[39m\n  \u001b[36m            1000 FORMAT(4E20.12)\u001b[39m\n  \u001b[36m                 NPRO=NPRO+4\u001b[39m\n  \u001b[36m                 IF(NPRO.LT.NVAL)GO TO 10\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .   continued processing\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \n  \u001b[36m     CASE 6\u001b[39m\n  \n  \u001b[36m     REAL\u001b[39m\n  \u001b[36m     DOUBLE PRECISION\u001b[39m\n  \u001b[36m     UNEVEN SPACING\u001b[39m\n  \n  \u001b[36m       Order of data in file          X1   Y1     X2   Y2\u001b[39m\n  \u001b[36m                                      X3   Y3     X4   Y4\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \u001b[36m       Input\u001b[39m\n  \n  \u001b[36m                 REAL X(2)\u001b[39m\n  \u001b[36m                 DOUBLE PRECISION Y(2)\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 NPRO=0\u001b[39m\n  \u001b[36m              10 READ(LUN,1000,ERR=  ,END=  )(X(I),Y(I),I=1,2)\u001b[39m\n  \u001b[36m            1000 FORMAT(2(E13.5,E20.12))\u001b[39m\n  \u001b[36m                 NPRO=NPRO+2\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .    code to process these two values\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 IF(NPRO.LT.NVAL)GO TO 10\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .   continued processing\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \n  \u001b[36m       Output\u001b[39m\n  \n  \u001b[36m                 REAL X(2)\u001b[39m\n  \u001b[36m                 DOUBLE PRECISION Y(2)\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 NPRO=0\u001b[39m\n  \u001b[36m              10 CONTINUE\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .    code to set up these two values\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 WRITE(LUN,1000,ERR=  )(X(I),Y(I),I=1,2)\u001b[39m\n  \u001b[36m            1000 FORMAT(2(E13.5,E20.12))\u001b[39m\n  \u001b[36m                 NPRO=NPRO+2\u001b[39m\n  \u001b[36m                 IF(NPRO.LT.NVAL)GO TO 10\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .   continued processing\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \n  \u001b[36m     CASE 7\u001b[39m\n  \n  \u001b[36m     COMPLEX\u001b[39m\n  \u001b[36m     DOUBLE PRECISION\u001b[39m\n  \u001b[36m     EVEN SPACING\u001b[39m\n  \n  \u001b[36m       Order of data in file          RY1    IY1    RY2    IY2\u001b[39m\n  \u001b[36m                                      RY3    IY3    RY4    IY4\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \n  \u001b[36m       Input\u001b[39m\n  \n  \u001b[36m                 DOUBLE PRECISION Y(2,2)\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 NPRO=0\u001b[39m\n  \u001b[36m              10 READ(LUN,1000,ERR=  ,END=  )((Y(I,J),I=1,2),J=1,2)\u001b[39m\n  \u001b[36m            1000 FORMAT(4E20.12)\u001b[39m\n  \u001b[36m                 NPRO=NPRO+2\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .    code to process these two values\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 IF(NPRO.LT.NVAL)GO TO 10\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .   continued processing\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \n  \u001b[36m       Output\u001b[39m\n  \n  \u001b[36m                 DOUBLE PRECISION Y(2,2)\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 NPRO=0\u001b[39m\n  \u001b[36m              10 CONTINUE\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .    code to set up these two values\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 WRITE(LUN,1000,ERR=  )((Y(I,J),I=1,2),J=1,2)\u001b[39m\n  \u001b[36m            1000 FORMAT(4E20.12)\u001b[39m\n  \u001b[36m                 NPRO=NPRO+2\u001b[39m\n  \u001b[36m                 IF(NPRO.LT.NVAL)GO TO 10\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .   continued processing\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m     CASE 8\u001b[39m\n  \n  \u001b[36m     COMPLEX\u001b[39m\n  \u001b[36m     DOUBLE PRECISION\u001b[39m\n  \u001b[36m     UNEVEN SPACING\u001b[39m\n  \n  \u001b[36m       Order of data in file          X1   RY1    IY1\u001b[39m\n  \u001b[36m                                      X2   RY2    IY2\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \u001b[36m                                       .\u001b[39m\n  \u001b[36m       Input\u001b[39m\n  \n  \u001b[36m                 REAL X\u001b[39m\n  \u001b[36m                 DOUBLE PRECISION Y(2)\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 NPRO=0\u001b[39m\n  \u001b[36m              10 READ(LUN,1000,ERR=  ,END=  )(X,Y(I),I=1,2)\u001b[39m\n  \u001b[36m            1000 FORMAT(E13.5,2E20.12)\u001b[39m\n  \u001b[36m                 NPRO=NPRO+1\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .    code to process this value\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 IF(NPRO.LT.NVAL)GO TO 10\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .   continued processing\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \n  \u001b[36m       Output\u001b[39m\n  \n  \u001b[36m                 REAL X\u001b[39m\n  \u001b[36m                 DOUBLE PRECISION Y(2)\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 NPRO=0\u001b[39m\n  \u001b[36m              10 CONTINUE\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .    code to set up this value\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                 WRITE(LUN,1000,ERR=  )(X,Y(I),I=1,2)\u001b[39m\n  \u001b[36m            1000 FORMAT(E13.5,2E20.12)\u001b[39m\n  \u001b[36m                 NPRO=NPRO+1\u001b[39m\n  \u001b[36m                 IF(NPRO.LT.NVAL)GO TO 10\u001b[39m\n  \u001b[36m                   .\u001b[39m\n  \u001b[36m                   .   continued processing\u001b[39m\n  \u001b[36m                   .\u001b[39m",
                        "text/markdown": "Universal Dataset Number: 58\n\n**Name:   Function at Nodal DOF**\n\n```julia\n     Record 1:     Format(80A1)\n                   Field 1    - ID Line 1\n\n                                             NOTE\n\n                       ID Line 1 is generally  used  for  the function\n                       description.\n\n\n     Record 2:     Format(80A1)\n                   Field 1    - ID Line 2\n\n     Record 3:     Format(80A1)\n                   Field 1    - ID Line 3\n\n                                             NOTE\n\n                       ID Line 3 is generally used to identify when the\n                       function  was  created.  The date is in the form\n                       DD-MMM-YY, and the time is in the form HH:MM:SS,\n                       with a general Format(9A1,1X,8A1).\n\n     Record 4:     Format(80A1)\n                   Field 1    - ID Line 4\n\n     Record 5:     Format(80A1)\n                   Field 1    - ID Line 5\n\n     Record 6:     Format(2(I5,I10),2(1X,10A1,I10,I4))\n                              DOF Identification\n                   Field 1    - Function Type\n                                0 - General or Unknown\n                                1 - Time Response\n                                2 - Auto Spectrum\n                                3 - Cross Spectrum\n                                4 - Frequency Response Function\n                                5 - Transmissibility\n                                6 - Coherence\n                                7 - Auto Correlation\n                                8 - Cross Correlation\n                                9 - Power Spectral Density (PSD)\n                                10 - Energy Spectral Density (ESD)\n                                11 - Probability Density Function\n                                12 - Spectrum\n                                13 - Cumulative Frequency Distribution\n                                14 - Peaks Valley\n                                15 - Stress/Cycles\n                                16 - Strain/Cycles\n                                17 - Orbit\n                                18 - Mode Indicator Function\n                                19 - Force Pattern\n                                20 - Partial Power\n                                21 - Partial Coherence\n                                22 - Eigenvalue\n                                23 - Eigenvector\n                                24 - Shock Response Spectrum\n                                25 - Finite Impulse Response Filter\n                                26 - Multiple Coherence\n                                27 - Order Function\n                   Field 2    - Function Identification Number\n                   Field 3    - Version Number, or sequence number\n                   Field 4    - Load Case Identification Number\n                                0 - Single Point Excitation\n                   Field 5    - Response Entity Name (\"NONE\" if unused)\n                   Field 6    - Response Node\n                   Field 7    - Response Direction\n                                 0 - Scalar\n                                 1 - +X Translation       4 - +X Rotation\n                                -1 - -X Translation      -4 - -X Rotation\n                                 2 - +Y Translation       5 - +Y Rotation\n                                -2 - -Y Translation      -5 - -Y Rotation\n                                 3 - +Z Translation       6 - +Z Rotation\n                                -3 - -Z Translation      -6 - -Z Rotation\n                   Field 8    - Reference Entity Name (\"NONE\" if unused)\n                   Field 9    - Reference Node\n                   Field 10   - Reference Direction  (same as field 7)\n\n                                             NOTE\n\n                       Fields 8, 9, and 10 are only relevant if field 4\n                       is zero.\n\n     Record 7:     Format(3I10,3E13.5)\n                              Data Form\n                   Field 1    - Ordinate Data Type\n                                2 - real, single precision\n                                4 - real, double precision\n                                5 - complex, single precision\n                                6 - complex, double precision\n                   Field 2    - Number of data pairs for uneven abscissa\n                                spacing, or number of data values for even\n                                abscissa spacing\n                   Field 3    - Abscissa Spacing\n                                0 - uneven\n                                1 - even (no abscissa values stored)\n                   Field 4    - Abscissa minimum (0.0 if spacing uneven)\n                   Field 5    - Abscissa increment (0.0 if spacing uneven)\n                   Field 6    - Z-axis value (0.0 if unused)\n\n     Record 8:     Format(I10,3I5,2(1X,20A1))\n                              Abscissa Data Characteristics\n                   Field 1    - Specific Data Type\n                                0 - unknown\n                                1 - general\n                                2 - stress\n                                3 - strain\n                                5 - temperature\n                                6 - heat flux\n                                8 - displacement\n                                9 - reaction force\n                                11 - velocity\n                                12 - acceleration\n                                13 - excitation force\n                                15 - pressure\n                                16 - mass\n                                17 - time\n                                18 - frequency\n                                19 - rpm\n                                20 - order\n                   Field 2    - Length units exponent\n                   Field 3    - Force units exponent\n                   Field 4    - Temperature units exponent\n\n                    NOTE\n\n                       Fields 2, 3 and  4  are  relevant  only  if the\n                       Specific Data Type is General, or in the case of\n                       ordinates, the response/reference direction is a\n                       scalar, or the functions are being used for\n                       nonlinear connectors in System Dynamics Analysis.\n                       See Addendum 'A' for the units exponent table.\n\n                   Field 5    - Axis label (\"NONE\" if not used)\n                   Field 6    - Axis units label (\"NONE\" if not used)\n\n                    NOTE\n\n                       If fields  5  and  6  are  supplied,  they take\n                       precendence  over  program  generated labels and\n                       units.\n\n     Record 9:     Format(I10,3I5,2(1X,20A1))\n                   Ordinate (or ordinate numerator) Data Characteristics\n\n     Record 10:    Format(I10,3I5,2(1X,20A1))\n                   Ordinate Denominator Data Characteristics\n\n     Record 11:    Format(I10,3I5,2(1X,20A1))\n                   Z-axis Data Characteristics\n\n                    NOTE\n\n                       Records 9, 10, and 11 are  always  included and\n                       have fields the same as record 8.  If records 10\n                       and 11 are not used, set field 1 to zero.\n\n     Record 12:\n                               Data Values\n\n                     Ordinate            Abscissa\n         Case     Type     Precision     Spacing       Format\n       -------------------------------------------------------------\n           1      real      single        even         6E13.5\n           2      real      single       uneven        6E13.5\n           3     complex    single        even         6E13.5\n           4     complex    single       uneven        6E13.5\n           5      real      double        even         4E20.12\n           6      real      double       uneven     2(E13.5,E20.12)\n           7     complex    double        even         4E20.12\n           8     complex    double       uneven      E13.5,2E20.12\n       --------------------------------------------------------------\n\n        NOTE\n\n       See  Addendum  'B'  for  typical  FORTRAN   READ/WRITE\n       statements for each case.\n\n\n     General Notes:\n\n          1.  ID lines may not be blank.  If no  information  is required,\n              the word \"NONE\" must appear in columns 1 through 4.\n\n          2.  ID line 1 appears on plots in Finite Element Modeling and is\n              used as the function description in System Dynamics Analysis.\n\n          3.  Dataloaders use the following ID line conventions\n                 ID Line 1 - Model Identification\n                 ID Line 2 - Run Identification\n                 ID Line 3 - Run Date and Time\n                 ID Line 4 - Load Case Name\n\n          4.  Coordinates codes from MODAL-PLUS and MODALX are decoded into\n              node and direction.\n\n          5.  Entity names used in System Dynamics Analysis prior to I-DEAS\n              Level 5 have a 4 character maximum. Beginning with Level 5,\n              entity names will be ignored if this dataset is preceded by\n              dataset 259. If no dataset 259 precedes this dataset, then the\n              entity name will be assumed to exist in model bin number 1.\n\n          6.  Record 10 is ignored by System Dynamics Analysis unless load\n              case = 0. Record 11 is always ignored by System Dynamics\n              Analysis.\n\n          7.  In record 6, if the response or reference names are \"NONE\"\n              and are not overridden by a dataset 259, but the correspond-\n              ing node is non-zero, System Dynamics Analysis adds the node\n              and direction to the function description if space is sufficie\n\n          8.  ID line 1 appears on XY plots in Test Data Analysis along\n              with ID line 5 if it is defined.  If defined, the axis units\n              labels also appear on the XY plot instead of the normal\n              labeling based on the data type of the function.\n\n          9.  For functions used with nonlinear connectors in System\n              Dynamics Analysis, the following requirements must be\n              adhered to:\n\n              a) Record 6: For a displacement-dependent function, the\n                 function type must be 0; for a frequency-dependent\n                 function, it must be 4. In either case, the load case\n                 identification number must be 0.\n\n              b) Record 8: For a displacement-dependent function, the\n                 specific data type must be 8 and the length units\n                 exponent must be 0 or 1; for a frequency-dependent\n                 function, the specific data type must be 18 and the\n                 length units exponent must be 0. In either case, the\n                 other units exponents must be 0.\n\n              c) Record 9: The specific data type must be 13. The\n                 temperature units exponent must be 0. For an ordinate\n                 numerator of force, the length and force units\n                 exponents must be 0 and 1, respectively. For an\n                 ordinate numerator of moment, the length and force\n                 units exponents must be 1 and 1, respectively.\n\n              d) Record 10: The specific data type must be 8 for\n                 stiffness and hysteretic damping; it must be 11\n                 for viscous damping. For an ordinate denominator of\n                 translational displacement, the length units exponent\n                 must be 1; for a rotational displacement, it must\n                 be 0. The other units exponents must be 0.\n\n              e) Dataset 217 must precede each function in order to\n                 define the function's usage (i.e. stiffness, viscous\n                 damping, hysteretic damping).\n\n    Addendum A\n\n     In order to correctly perform units  conversion,  length,  force, and\n     temperature  exponents  must  be  supplied for a specific data type of\n     General; that is, Record 8 Field 1 = 1.  For example, if the function\n     has  the  physical dimensionality of Energy (Force * Length), then the\n     required exponents would be as follows:\n\n             Length = 1\n             Force = 1          Energy = L * F\n             Temperature = 0\n\n     Units exponents for the remaining specific data types  should not  be\n     supplied.  The following exponents will automatically be used.\n\n                          Table - Unit Exponents\n          -------------------------------------------------------\n           Specific                   Direction\n                    ---------------------------------------------\n             Data       Translational            Rotational\n                    ---------------------------------------------\n             Type    Length  Force  Temp    Length  Force  Temp\n          -------------------------------------------------------\n              0        0       0      0       0       0      0\n              1             (requires input to fields 2,3,4)\n              2       -2       1      0      -1       1      0\n              3        0       0      0       0       0      0\n              5        0       0      1       0       0      1\n              6        1       1      0       1       1      0\n              8        1       0      0       0       0      0\n              9        0       1      0       1       1      0\n             11        1       0      0       0       0      0\n             12        1       0      0       0       0      0\n             13        0       1      0       1       1      0\n             15       -2       1      0      -1       1      0\n             16       -1       1      0       1       1      0\n             17        0       0      0       0       0      0\n             18        0       0      0       0       0      0\n             19        0       0      0       0       0      0\n          --------------------------------------------------------\n\n            NOTE\n\n             Units exponents for scalar points are defined within\n             System Analysis prior to reading this dataset.\n\n    Addendum B\n\n     There are 8 distinct  combinations  of  parameters  which  affect the\n     details   of  READ/WRITE  operations.   The  parameters  involved are\n     Ordinate Data Type, Ordinate Data  Precision,  and  Abscissa Spacing.\n     Each  combination  is documented in the examples below.  In all cases,\n     the number of data values (for even abscissa spacing)  or  data pairs\n     (for  uneven  abscissa  spacing)  is NVAL.  The abcissa is always real\n     single precision.  Complex double precision is  handled  by  two real\n     double  precision  variables  (real  part  followed by imaginary part)\n     because most systems do not directly support complex double precision.\n\n     CASE 1\n\n     REAL\n     SINGLE PRECISION\n     EVEN SPACING\n\n       Order of data in file           Y1   Y2   Y3   Y4   Y5   Y6\n                                       Y7   Y8   Y9   Y10  Y11  Y12\n                                                  .\n                                                  .\n                                                  .\n       Input\n\n                 REAL Y(6)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 READ(LUN,1000,ERR=  ,END=  )(Y(I),I=1,6)\n            1000 FORMAT(6E13.5)\n                 NPRO=NPRO+6\n                   .\n                   .    code to process these six values\n                   .\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 REAL Y(6)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 CONTINUE\n                   .\n                   .    code to set up these six values\n                   .\n                 WRITE(LUN,1000,ERR=  )(Y(I),I=1,6)\n            1000 FORMAT(6E13.5)\n                 NPRO=NPRO+6\n\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 2\n\n     REAL\n     SINGLE PRECISION\n     UNEVEN SPACING\n\n       Order of data in file          X1   Y1   X2   Y2   X3   Y3\n                                      X4   Y4   X5   Y5   X6   Y6\n                                       .\n                                       .\n                                       .\n\n       Input\n\n                 REAL X(3),Y(3)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 READ(LUN,1000,ERR=  ,END=  )(X(I),Y(I),I=1,3)\n            1000 FORMAT(6E13.5)\n                 NPRO=NPRO+3\n                   .\n                   .    code to process these three values\n                   .\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 REAL X(3),Y(3)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 CONTINUE\n                   .\n                   .    code to set up these three values\n                   .\n                 WRITE(LUN,1000,ERR=  )(X(I),Y(I),I=1,3)\n            1000 FORMAT(6E13.5)\n                 NPRO=NPRO+3\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 3\n\n     COMPLEX\n     SINGLE PRECISION\n     EVEN SPACING\n\n       Order of data in file          RY1  IY1  RY2  IY2  RY3  IY3\n                                      RY4  IY4  RY5  IY5  RY6  IY6\n                                       .\n                                       .\n                                       .\n\n       Input\n\n                 COMPLEX Y(3)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 READ(LUN,1000,ERR=  ,END=  )(Y(I),I=1,3)\n            1000 FORMAT(6E13.5)\n                 NPRO=NPRO+3\n                   .\n                   .    code to process these six values\n                   .\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n\n       Output\n\n                 COMPLEX Y(3)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 CONTINUE\n                   .\n                   .    code to set up these three values\n                   .\n                 WRITE(LUN,1000,ERR=  )(Y(I),I=1,3)\n            1000 FORMAT(6E13.5)\n                 NPRO=NPRO+3\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 4\n\n     COMPLEX\n     SINGLE PRECISION\n     UNEVEN SPACING\n\n       Order of data in file          X1   RY1  IY1  X2  RY2  IY2\n                                      X3   RY3  IY3  X4  RY4  IY4\n\n                                       .\n                                       .\n                                       .\n\n       Input\n\n                 REAL X(2)\n                 COMPLEX Y(2)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 READ(LUN,1000,ERR=  ,END=  )(X(I),Y(I),I=1,2)\n            1000 FORMAT(6E13.5)\n                 NPRO=NPRO+2\n                   .\n                   .    code to process these two values\n                   .\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n      Output\n\n                 REAL X(2)\n                 COMPLEX Y(2)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 CONTINUE\n                   .\n                   .    code to set up these two values\n                   .\n                 WRITE(LUN,1000,ERR=  )(X(I),Y(I),I=1,2)\n            1000 FORMAT(6E13.5)\n                 NPRO=NPRO+2\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 5\n\n     REAL\n     DOUBLE PRECISION\n     EVEN SPACING\n\n       Order of data in file          Y1     Y2     Y3     Y4\n                                      Y5     Y6     Y7     Y8\n                                       .\n                                       .\n                                       .\n       Input\n\n                 DOUBLE PRECISION Y(4)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 READ(LUN,1000,ERR=  ,END=  )(Y(I),I=1,4)\n            1000 FORMAT(4E20.12)\n                 NPRO=NPRO+4\n                   .\n                   .    code to process these four values\n                   .\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 DOUBLE PRECISION Y(4)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 CONTINUE\n                   .\n                   .    code to set up these four values\n                   .\n                 WRITE(LUN,1000,ERR=  )(Y(I),I=1,4)\n            1000 FORMAT(4E20.12)\n                 NPRO=NPRO+4\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 6\n\n     REAL\n     DOUBLE PRECISION\n     UNEVEN SPACING\n\n       Order of data in file          X1   Y1     X2   Y2\n                                      X3   Y3     X4   Y4\n                                       .\n                                       .\n                                       .\n       Input\n\n                 REAL X(2)\n                 DOUBLE PRECISION Y(2)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 READ(LUN,1000,ERR=  ,END=  )(X(I),Y(I),I=1,2)\n            1000 FORMAT(2(E13.5,E20.12))\n                 NPRO=NPRO+2\n                   .\n                   .    code to process these two values\n                   .\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 REAL X(2)\n                 DOUBLE PRECISION Y(2)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 CONTINUE\n                   .\n                   .    code to set up these two values\n                   .\n                 WRITE(LUN,1000,ERR=  )(X(I),Y(I),I=1,2)\n            1000 FORMAT(2(E13.5,E20.12))\n                 NPRO=NPRO+2\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 7\n\n     COMPLEX\n     DOUBLE PRECISION\n     EVEN SPACING\n\n       Order of data in file          RY1    IY1    RY2    IY2\n                                      RY3    IY3    RY4    IY4\n                                       .\n                                       .\n                                       .\n\n       Input\n\n                 DOUBLE PRECISION Y(2,2)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 READ(LUN,1000,ERR=  ,END=  )((Y(I,J),I=1,2),J=1,2)\n            1000 FORMAT(4E20.12)\n                 NPRO=NPRO+2\n                   .\n                   .    code to process these two values\n                   .\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 DOUBLE PRECISION Y(2,2)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 CONTINUE\n                   .\n                   .    code to set up these two values\n                   .\n                 WRITE(LUN,1000,ERR=  )((Y(I,J),I=1,2),J=1,2)\n            1000 FORMAT(4E20.12)\n                 NPRO=NPRO+2\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n     CASE 8\n\n     COMPLEX\n     DOUBLE PRECISION\n     UNEVEN SPACING\n\n       Order of data in file          X1   RY1    IY1\n                                      X2   RY2    IY2\n                                       .\n                                       .\n                                       .\n       Input\n\n                 REAL X\n                 DOUBLE PRECISION Y(2)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 READ(LUN,1000,ERR=  ,END=  )(X,Y(I),I=1,2)\n            1000 FORMAT(E13.5,2E20.12)\n                 NPRO=NPRO+1\n                   .\n                   .    code to process this value\n                   .\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 REAL X\n                 DOUBLE PRECISION Y(2)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 CONTINUE\n                   .\n                   .    code to set up this value\n                   .\n                 WRITE(LUN,1000,ERR=  )(X,Y(I),I=1,2)\n            1000 FORMAT(E13.5,2E20.12)\n                 NPRO=NPRO+1\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n```\n",
                        "text/html": "<div class=\"markdown\"><p>Universal Dataset Number: 58</p>\n<p><strong>Name:   Function at Nodal DOF</strong></p>\n<pre><code class=\"language-julia\">     Record 1:     Format&#40;80A1&#41;\n                   Field 1    - ID Line 1\n\n                                             NOTE\n\n                       ID Line 1 is generally  used  for  the function\n                       description.\n\n\n     Record 2:     Format&#40;80A1&#41;\n                   Field 1    - ID Line 2\n\n     Record 3:     Format&#40;80A1&#41;\n                   Field 1    - ID Line 3\n\n                                             NOTE\n\n                       ID Line 3 is generally used to identify when the\n                       function  was  created.  The date is in the form\n                       DD-MMM-YY, and the time is in the form HH:MM:SS,\n                       with a general Format&#40;9A1,1X,8A1&#41;.\n\n     Record 4:     Format&#40;80A1&#41;\n                   Field 1    - ID Line 4\n\n     Record 5:     Format&#40;80A1&#41;\n                   Field 1    - ID Line 5\n\n     Record 6:     Format&#40;2&#40;I5,I10&#41;,2&#40;1X,10A1,I10,I4&#41;&#41;\n                              DOF Identification\n                   Field 1    - Function Type\n                                0 - General or Unknown\n                                1 - Time Response\n                                2 - Auto Spectrum\n                                3 - Cross Spectrum\n                                4 - Frequency Response Function\n                                5 - Transmissibility\n                                6 - Coherence\n                                7 - Auto Correlation\n                                8 - Cross Correlation\n                                9 - Power Spectral Density &#40;PSD&#41;\n                                10 - Energy Spectral Density &#40;ESD&#41;\n                                11 - Probability Density Function\n                                12 - Spectrum\n                                13 - Cumulative Frequency Distribution\n                                14 - Peaks Valley\n                                15 - Stress/Cycles\n                                16 - Strain/Cycles\n                                17 - Orbit\n                                18 - Mode Indicator Function\n                                19 - Force Pattern\n                                20 - Partial Power\n                                21 - Partial Coherence\n                                22 - Eigenvalue\n                                23 - Eigenvector\n                                24 - Shock Response Spectrum\n                                25 - Finite Impulse Response Filter\n                                26 - Multiple Coherence\n                                27 - Order Function\n                   Field 2    - Function Identification Number\n                   Field 3    - Version Number, or sequence number\n                   Field 4    - Load Case Identification Number\n                                0 - Single Point Excitation\n                   Field 5    - Response Entity Name &#40;&quot;NONE&quot; if unused&#41;\n                   Field 6    - Response Node\n                   Field 7    - Response Direction\n                                 0 - Scalar\n                                 1 - &#43;X Translation       4 - &#43;X Rotation\n                                -1 - -X Translation      -4 - -X Rotation\n                                 2 - &#43;Y Translation       5 - &#43;Y Rotation\n                                -2 - -Y Translation      -5 - -Y Rotation\n                                 3 - &#43;Z Translation       6 - &#43;Z Rotation\n                                -3 - -Z Translation      -6 - -Z Rotation\n                   Field 8    - Reference Entity Name &#40;&quot;NONE&quot; if unused&#41;\n                   Field 9    - Reference Node\n                   Field 10   - Reference Direction  &#40;same as field 7&#41;\n\n                                             NOTE\n\n                       Fields 8, 9, and 10 are only relevant if field 4\n                       is zero.\n\n     Record 7:     Format&#40;3I10,3E13.5&#41;\n                              Data Form\n                   Field 1    - Ordinate Data Type\n                                2 - real, single precision\n                                4 - real, double precision\n                                5 - complex, single precision\n                                6 - complex, double precision\n                   Field 2    - Number of data pairs for uneven abscissa\n                                spacing, or number of data values for even\n                                abscissa spacing\n                   Field 3    - Abscissa Spacing\n                                0 - uneven\n                                1 - even &#40;no abscissa values stored&#41;\n                   Field 4    - Abscissa minimum &#40;0.0 if spacing uneven&#41;\n                   Field 5    - Abscissa increment &#40;0.0 if spacing uneven&#41;\n                   Field 6    - Z-axis value &#40;0.0 if unused&#41;\n\n     Record 8:     Format&#40;I10,3I5,2&#40;1X,20A1&#41;&#41;\n                              Abscissa Data Characteristics\n                   Field 1    - Specific Data Type\n                                0 - unknown\n                                1 - general\n                                2 - stress\n                                3 - strain\n                                5 - temperature\n                                6 - heat flux\n                                8 - displacement\n                                9 - reaction force\n                                11 - velocity\n                                12 - acceleration\n                                13 - excitation force\n                                15 - pressure\n                                16 - mass\n                                17 - time\n                                18 - frequency\n                                19 - rpm\n                                20 - order\n                   Field 2    - Length units exponent\n                   Field 3    - Force units exponent\n                   Field 4    - Temperature units exponent\n\n                    NOTE\n\n                       Fields 2, 3 and  4  are  relevant  only  if the\n                       Specific Data Type is General, or in the case of\n                       ordinates, the response/reference direction is a\n                       scalar, or the functions are being used for\n                       nonlinear connectors in System Dynamics Analysis.\n                       See Addendum &#39;A&#39; for the units exponent table.\n\n                   Field 5    - Axis label &#40;&quot;NONE&quot; if not used&#41;\n                   Field 6    - Axis units label &#40;&quot;NONE&quot; if not used&#41;\n\n                    NOTE\n\n                       If fields  5  and  6  are  supplied,  they take\n                       precendence  over  program  generated labels and\n                       units.\n\n     Record 9:     Format&#40;I10,3I5,2&#40;1X,20A1&#41;&#41;\n                   Ordinate &#40;or ordinate numerator&#41; Data Characteristics\n\n     Record 10:    Format&#40;I10,3I5,2&#40;1X,20A1&#41;&#41;\n                   Ordinate Denominator Data Characteristics\n\n     Record 11:    Format&#40;I10,3I5,2&#40;1X,20A1&#41;&#41;\n                   Z-axis Data Characteristics\n\n                    NOTE\n\n                       Records 9, 10, and 11 are  always  included and\n                       have fields the same as record 8.  If records 10\n                       and 11 are not used, set field 1 to zero.\n\n     Record 12:\n                               Data Values\n\n                     Ordinate            Abscissa\n         Case     Type     Precision     Spacing       Format\n       -------------------------------------------------------------\n           1      real      single        even         6E13.5\n           2      real      single       uneven        6E13.5\n           3     complex    single        even         6E13.5\n           4     complex    single       uneven        6E13.5\n           5      real      double        even         4E20.12\n           6      real      double       uneven     2&#40;E13.5,E20.12&#41;\n           7     complex    double        even         4E20.12\n           8     complex    double       uneven      E13.5,2E20.12\n       --------------------------------------------------------------\n\n        NOTE\n\n       See  Addendum  &#39;B&#39;  for  typical  FORTRAN   READ/WRITE\n       statements for each case.\n\n\n     General Notes:\n\n          1.  ID lines may not be blank.  If no  information  is required,\n              the word &quot;NONE&quot; must appear in columns 1 through 4.\n\n          2.  ID line 1 appears on plots in Finite Element Modeling and is\n              used as the function description in System Dynamics Analysis.\n\n          3.  Dataloaders use the following ID line conventions\n                 ID Line 1 - Model Identification\n                 ID Line 2 - Run Identification\n                 ID Line 3 - Run Date and Time\n                 ID Line 4 - Load Case Name\n\n          4.  Coordinates codes from MODAL-PLUS and MODALX are decoded into\n              node and direction.\n\n          5.  Entity names used in System Dynamics Analysis prior to I-DEAS\n              Level 5 have a 4 character maximum. Beginning with Level 5,\n              entity names will be ignored if this dataset is preceded by\n              dataset 259. If no dataset 259 precedes this dataset, then the\n              entity name will be assumed to exist in model bin number 1.\n\n          6.  Record 10 is ignored by System Dynamics Analysis unless load\n              case &#61; 0. Record 11 is always ignored by System Dynamics\n              Analysis.\n\n          7.  In record 6, if the response or reference names are &quot;NONE&quot;\n              and are not overridden by a dataset 259, but the correspond-\n              ing node is non-zero, System Dynamics Analysis adds the node\n              and direction to the function description if space is sufficie\n\n          8.  ID line 1 appears on XY plots in Test Data Analysis along\n              with ID line 5 if it is defined.  If defined, the axis units\n              labels also appear on the XY plot instead of the normal\n              labeling based on the data type of the function.\n\n          9.  For functions used with nonlinear connectors in System\n              Dynamics Analysis, the following requirements must be\n              adhered to:\n\n              a&#41; Record 6: For a displacement-dependent function, the\n                 function type must be 0; for a frequency-dependent\n                 function, it must be 4. In either case, the load case\n                 identification number must be 0.\n\n              b&#41; Record 8: For a displacement-dependent function, the\n                 specific data type must be 8 and the length units\n                 exponent must be 0 or 1; for a frequency-dependent\n                 function, the specific data type must be 18 and the\n                 length units exponent must be 0. In either case, the\n                 other units exponents must be 0.\n\n              c&#41; Record 9: The specific data type must be 13. The\n                 temperature units exponent must be 0. For an ordinate\n                 numerator of force, the length and force units\n                 exponents must be 0 and 1, respectively. For an\n                 ordinate numerator of moment, the length and force\n                 units exponents must be 1 and 1, respectively.\n\n              d&#41; Record 10: The specific data type must be 8 for\n                 stiffness and hysteretic damping; it must be 11\n                 for viscous damping. For an ordinate denominator of\n                 translational displacement, the length units exponent\n                 must be 1; for a rotational displacement, it must\n                 be 0. The other units exponents must be 0.\n\n              e&#41; Dataset 217 must precede each function in order to\n                 define the function&#39;s usage &#40;i.e. stiffness, viscous\n                 damping, hysteretic damping&#41;.\n\n    Addendum A\n\n     In order to correctly perform units  conversion,  length,  force, and\n     temperature  exponents  must  be  supplied for a specific data type of\n     General; that is, Record 8 Field 1 &#61; 1.  For example, if the function\n     has  the  physical dimensionality of Energy &#40;Force * Length&#41;, then the\n     required exponents would be as follows:\n\n             Length &#61; 1\n             Force &#61; 1          Energy &#61; L * F\n             Temperature &#61; 0\n\n     Units exponents for the remaining specific data types  should not  be\n     supplied.  The following exponents will automatically be used.\n\n                          Table - Unit Exponents\n          -------------------------------------------------------\n           Specific                   Direction\n                    ---------------------------------------------\n             Data       Translational            Rotational\n                    ---------------------------------------------\n             Type    Length  Force  Temp    Length  Force  Temp\n          -------------------------------------------------------\n              0        0       0      0       0       0      0\n              1             &#40;requires input to fields 2,3,4&#41;\n              2       -2       1      0      -1       1      0\n              3        0       0      0       0       0      0\n              5        0       0      1       0       0      1\n              6        1       1      0       1       1      0\n              8        1       0      0       0       0      0\n              9        0       1      0       1       1      0\n             11        1       0      0       0       0      0\n             12        1       0      0       0       0      0\n             13        0       1      0       1       1      0\n             15       -2       1      0      -1       1      0\n             16       -1       1      0       1       1      0\n             17        0       0      0       0       0      0\n             18        0       0      0       0       0      0\n             19        0       0      0       0       0      0\n          --------------------------------------------------------\n\n            NOTE\n\n             Units exponents for scalar points are defined within\n             System Analysis prior to reading this dataset.\n\n    Addendum B\n\n     There are 8 distinct  combinations  of  parameters  which  affect the\n     details   of  READ/WRITE  operations.   The  parameters  involved are\n     Ordinate Data Type, Ordinate Data  Precision,  and  Abscissa Spacing.\n     Each  combination  is documented in the examples below.  In all cases,\n     the number of data values &#40;for even abscissa spacing&#41;  or  data pairs\n     &#40;for  uneven  abscissa  spacing&#41;  is NVAL.  The abcissa is always real\n     single precision.  Complex double precision is  handled  by  two real\n     double  precision  variables  &#40;real  part  followed by imaginary part&#41;\n     because most systems do not directly support complex double precision.\n\n     CASE 1\n\n     REAL\n     SINGLE PRECISION\n     EVEN SPACING\n\n       Order of data in file           Y1   Y2   Y3   Y4   Y5   Y6\n                                       Y7   Y8   Y9   Y10  Y11  Y12\n                                                  .\n                                                  .\n                                                  .\n       Input\n\n                 REAL Y&#40;6&#41;\n                   .\n                   .\n                   .\n                 NPRO&#61;0\n              10 READ&#40;LUN,1000,ERR&#61;  ,END&#61;  &#41;&#40;Y&#40;I&#41;,I&#61;1,6&#41;\n            1000 FORMAT&#40;6E13.5&#41;\n                 NPRO&#61;NPRO&#43;6\n                   .\n                   .    code to process these six values\n                   .\n                 IF&#40;NPRO.LT.NVAL&#41;GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 REAL Y&#40;6&#41;\n                   .\n                   .\n                   .\n                 NPRO&#61;0\n              10 CONTINUE\n                   .\n                   .    code to set up these six values\n                   .\n                 WRITE&#40;LUN,1000,ERR&#61;  &#41;&#40;Y&#40;I&#41;,I&#61;1,6&#41;\n            1000 FORMAT&#40;6E13.5&#41;\n                 NPRO&#61;NPRO&#43;6\n\n                 IF&#40;NPRO.LT.NVAL&#41;GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 2\n\n     REAL\n     SINGLE PRECISION\n     UNEVEN SPACING\n\n       Order of data in file          X1   Y1   X2   Y2   X3   Y3\n                                      X4   Y4   X5   Y5   X6   Y6\n                                       .\n                                       .\n                                       .\n\n       Input\n\n                 REAL X&#40;3&#41;,Y&#40;3&#41;\n                   .\n                   .\n                   .\n                 NPRO&#61;0\n              10 READ&#40;LUN,1000,ERR&#61;  ,END&#61;  &#41;&#40;X&#40;I&#41;,Y&#40;I&#41;,I&#61;1,3&#41;\n            1000 FORMAT&#40;6E13.5&#41;\n                 NPRO&#61;NPRO&#43;3\n                   .\n                   .    code to process these three values\n                   .\n                 IF&#40;NPRO.LT.NVAL&#41;GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 REAL X&#40;3&#41;,Y&#40;3&#41;\n                   .\n                   .\n                   .\n                 NPRO&#61;0\n              10 CONTINUE\n                   .\n                   .    code to set up these three values\n                   .\n                 WRITE&#40;LUN,1000,ERR&#61;  &#41;&#40;X&#40;I&#41;,Y&#40;I&#41;,I&#61;1,3&#41;\n            1000 FORMAT&#40;6E13.5&#41;\n                 NPRO&#61;NPRO&#43;3\n                 IF&#40;NPRO.LT.NVAL&#41;GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 3\n\n     COMPLEX\n     SINGLE PRECISION\n     EVEN SPACING\n\n       Order of data in file          RY1  IY1  RY2  IY2  RY3  IY3\n                                      RY4  IY4  RY5  IY5  RY6  IY6\n                                       .\n                                       .\n                                       .\n\n       Input\n\n                 COMPLEX Y&#40;3&#41;\n                   .\n                   .\n                   .\n                 NPRO&#61;0\n              10 READ&#40;LUN,1000,ERR&#61;  ,END&#61;  &#41;&#40;Y&#40;I&#41;,I&#61;1,3&#41;\n            1000 FORMAT&#40;6E13.5&#41;\n                 NPRO&#61;NPRO&#43;3\n                   .\n                   .    code to process these six values\n                   .\n                 IF&#40;NPRO.LT.NVAL&#41;GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n\n       Output\n\n                 COMPLEX Y&#40;3&#41;\n                   .\n                   .\n                   .\n                 NPRO&#61;0\n              10 CONTINUE\n                   .\n                   .    code to set up these three values\n                   .\n                 WRITE&#40;LUN,1000,ERR&#61;  &#41;&#40;Y&#40;I&#41;,I&#61;1,3&#41;\n            1000 FORMAT&#40;6E13.5&#41;\n                 NPRO&#61;NPRO&#43;3\n                 IF&#40;NPRO.LT.NVAL&#41;GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 4\n\n     COMPLEX\n     SINGLE PRECISION\n     UNEVEN SPACING\n\n       Order of data in file          X1   RY1  IY1  X2  RY2  IY2\n                                      X3   RY3  IY3  X4  RY4  IY4\n\n                                       .\n                                       .\n                                       .\n\n       Input\n\n                 REAL X&#40;2&#41;\n                 COMPLEX Y&#40;2&#41;\n                   .\n                   .\n                   .\n                 NPRO&#61;0\n              10 READ&#40;LUN,1000,ERR&#61;  ,END&#61;  &#41;&#40;X&#40;I&#41;,Y&#40;I&#41;,I&#61;1,2&#41;\n            1000 FORMAT&#40;6E13.5&#41;\n                 NPRO&#61;NPRO&#43;2\n                   .\n                   .    code to process these two values\n                   .\n                 IF&#40;NPRO.LT.NVAL&#41;GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n      Output\n\n                 REAL X&#40;2&#41;\n                 COMPLEX Y&#40;2&#41;\n                   .\n                   .\n                   .\n                 NPRO&#61;0\n              10 CONTINUE\n                   .\n                   .    code to set up these two values\n                   .\n                 WRITE&#40;LUN,1000,ERR&#61;  &#41;&#40;X&#40;I&#41;,Y&#40;I&#41;,I&#61;1,2&#41;\n            1000 FORMAT&#40;6E13.5&#41;\n                 NPRO&#61;NPRO&#43;2\n                 IF&#40;NPRO.LT.NVAL&#41;GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 5\n\n     REAL\n     DOUBLE PRECISION\n     EVEN SPACING\n\n       Order of data in file          Y1     Y2     Y3     Y4\n                                      Y5     Y6     Y7     Y8\n                                       .\n                                       .\n                                       .\n       Input\n\n                 DOUBLE PRECISION Y&#40;4&#41;\n                   .\n                   .\n                   .\n                 NPRO&#61;0\n              10 READ&#40;LUN,1000,ERR&#61;  ,END&#61;  &#41;&#40;Y&#40;I&#41;,I&#61;1,4&#41;\n            1000 FORMAT&#40;4E20.12&#41;\n                 NPRO&#61;NPRO&#43;4\n                   .\n                   .    code to process these four values\n                   .\n                 IF&#40;NPRO.LT.NVAL&#41;GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 DOUBLE PRECISION Y&#40;4&#41;\n                   .\n                   .\n                   .\n                 NPRO&#61;0\n              10 CONTINUE\n                   .\n                   .    code to set up these four values\n                   .\n                 WRITE&#40;LUN,1000,ERR&#61;  &#41;&#40;Y&#40;I&#41;,I&#61;1,4&#41;\n            1000 FORMAT&#40;4E20.12&#41;\n                 NPRO&#61;NPRO&#43;4\n                 IF&#40;NPRO.LT.NVAL&#41;GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 6\n\n     REAL\n     DOUBLE PRECISION\n     UNEVEN SPACING\n\n       Order of data in file          X1   Y1     X2   Y2\n                                      X3   Y3     X4   Y4\n                                       .\n                                       .\n                                       .\n       Input\n\n                 REAL X&#40;2&#41;\n                 DOUBLE PRECISION Y&#40;2&#41;\n                   .\n                   .\n                   .\n                 NPRO&#61;0\n              10 READ&#40;LUN,1000,ERR&#61;  ,END&#61;  &#41;&#40;X&#40;I&#41;,Y&#40;I&#41;,I&#61;1,2&#41;\n            1000 FORMAT&#40;2&#40;E13.5,E20.12&#41;&#41;\n                 NPRO&#61;NPRO&#43;2\n                   .\n                   .    code to process these two values\n                   .\n                 IF&#40;NPRO.LT.NVAL&#41;GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 REAL X&#40;2&#41;\n                 DOUBLE PRECISION Y&#40;2&#41;\n                   .\n                   .\n                   .\n                 NPRO&#61;0\n              10 CONTINUE\n                   .\n                   .    code to set up these two values\n                   .\n                 WRITE&#40;LUN,1000,ERR&#61;  &#41;&#40;X&#40;I&#41;,Y&#40;I&#41;,I&#61;1,2&#41;\n            1000 FORMAT&#40;2&#40;E13.5,E20.12&#41;&#41;\n                 NPRO&#61;NPRO&#43;2\n                 IF&#40;NPRO.LT.NVAL&#41;GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 7\n\n     COMPLEX\n     DOUBLE PRECISION\n     EVEN SPACING\n\n       Order of data in file          RY1    IY1    RY2    IY2\n                                      RY3    IY3    RY4    IY4\n                                       .\n                                       .\n                                       .\n\n       Input\n\n                 DOUBLE PRECISION Y&#40;2,2&#41;\n                   .\n                   .\n                   .\n                 NPRO&#61;0\n              10 READ&#40;LUN,1000,ERR&#61;  ,END&#61;  &#41;&#40;&#40;Y&#40;I,J&#41;,I&#61;1,2&#41;,J&#61;1,2&#41;\n            1000 FORMAT&#40;4E20.12&#41;\n                 NPRO&#61;NPRO&#43;2\n                   .\n                   .    code to process these two values\n                   .\n                 IF&#40;NPRO.LT.NVAL&#41;GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 DOUBLE PRECISION Y&#40;2,2&#41;\n                   .\n                   .\n                   .\n                 NPRO&#61;0\n              10 CONTINUE\n                   .\n                   .    code to set up these two values\n                   .\n                 WRITE&#40;LUN,1000,ERR&#61;  &#41;&#40;&#40;Y&#40;I,J&#41;,I&#61;1,2&#41;,J&#61;1,2&#41;\n            1000 FORMAT&#40;4E20.12&#41;\n                 NPRO&#61;NPRO&#43;2\n                 IF&#40;NPRO.LT.NVAL&#41;GO TO 10\n                   .\n                   .   continued processing\n                   .\n     CASE 8\n\n     COMPLEX\n     DOUBLE PRECISION\n     UNEVEN SPACING\n\n       Order of data in file          X1   RY1    IY1\n                                      X2   RY2    IY2\n                                       .\n                                       .\n                                       .\n       Input\n\n                 REAL X\n                 DOUBLE PRECISION Y&#40;2&#41;\n                   .\n                   .\n                   .\n                 NPRO&#61;0\n              10 READ&#40;LUN,1000,ERR&#61;  ,END&#61;  &#41;&#40;X,Y&#40;I&#41;,I&#61;1,2&#41;\n            1000 FORMAT&#40;E13.5,2E20.12&#41;\n                 NPRO&#61;NPRO&#43;1\n                   .\n                   .    code to process this value\n                   .\n                 IF&#40;NPRO.LT.NVAL&#41;GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 REAL X\n                 DOUBLE PRECISION Y&#40;2&#41;\n                   .\n                   .\n                   .\n                 NPRO&#61;0\n              10 CONTINUE\n                   .\n                   .    code to set up this value\n                   .\n                 WRITE&#40;LUN,1000,ERR&#61;  &#41;&#40;X,Y&#40;I&#41;,I&#61;1,2&#41;\n            1000 FORMAT&#40;E13.5,2E20.12&#41;\n                 NPRO&#61;NPRO&#43;1\n                 IF&#40;NPRO.LT.NVAL&#41;GO TO 10\n                   .\n                   .   continued processing\n                   .</code></pre>\n\n\n</div>",
                        "text/latex": "Universal Dataset Number: 58\n\n\\textbf{Name:   Function at Nodal DOF}\n\n\\begin{verbatim}\n     Record 1:     Format(80A1)\n                   Field 1    - ID Line 1\n\n                                             NOTE\n\n                       ID Line 1 is generally  used  for  the function\n                       description.\n\n\n     Record 2:     Format(80A1)\n                   Field 1    - ID Line 2\n\n     Record 3:     Format(80A1)\n                   Field 1    - ID Line 3\n\n                                             NOTE\n\n                       ID Line 3 is generally used to identify when the\n                       function  was  created.  The date is in the form\n                       DD-MMM-YY, and the time is in the form HH:MM:SS,\n                       with a general Format(9A1,1X,8A1).\n\n     Record 4:     Format(80A1)\n                   Field 1    - ID Line 4\n\n     Record 5:     Format(80A1)\n                   Field 1    - ID Line 5\n\n     Record 6:     Format(2(I5,I10),2(1X,10A1,I10,I4))\n                              DOF Identification\n                   Field 1    - Function Type\n                                0 - General or Unknown\n                                1 - Time Response\n                                2 - Auto Spectrum\n                                3 - Cross Spectrum\n                                4 - Frequency Response Function\n                                5 - Transmissibility\n                                6 - Coherence\n                                7 - Auto Correlation\n                                8 - Cross Correlation\n                                9 - Power Spectral Density (PSD)\n                                10 - Energy Spectral Density (ESD)\n                                11 - Probability Density Function\n                                12 - Spectrum\n                                13 - Cumulative Frequency Distribution\n                                14 - Peaks Valley\n                                15 - Stress/Cycles\n                                16 - Strain/Cycles\n                                17 - Orbit\n                                18 - Mode Indicator Function\n                                19 - Force Pattern\n                                20 - Partial Power\n                                21 - Partial Coherence\n                                22 - Eigenvalue\n                                23 - Eigenvector\n                                24 - Shock Response Spectrum\n                                25 - Finite Impulse Response Filter\n                                26 - Multiple Coherence\n                                27 - Order Function\n                   Field 2    - Function Identification Number\n                   Field 3    - Version Number, or sequence number\n                   Field 4    - Load Case Identification Number\n                                0 - Single Point Excitation\n                   Field 5    - Response Entity Name (\"NONE\" if unused)\n                   Field 6    - Response Node\n                   Field 7    - Response Direction\n                                 0 - Scalar\n                                 1 - +X Translation       4 - +X Rotation\n                                -1 - -X Translation      -4 - -X Rotation\n                                 2 - +Y Translation       5 - +Y Rotation\n                                -2 - -Y Translation      -5 - -Y Rotation\n                                 3 - +Z Translation       6 - +Z Rotation\n                                -3 - -Z Translation      -6 - -Z Rotation\n                   Field 8    - Reference Entity Name (\"NONE\" if unused)\n                   Field 9    - Reference Node\n                   Field 10   - Reference Direction  (same as field 7)\n\n                                             NOTE\n\n                       Fields 8, 9, and 10 are only relevant if field 4\n                       is zero.\n\n     Record 7:     Format(3I10,3E13.5)\n                              Data Form\n                   Field 1    - Ordinate Data Type\n                                2 - real, single precision\n                                4 - real, double precision\n                                5 - complex, single precision\n                                6 - complex, double precision\n                   Field 2    - Number of data pairs for uneven abscissa\n                                spacing, or number of data values for even\n                                abscissa spacing\n                   Field 3    - Abscissa Spacing\n                                0 - uneven\n                                1 - even (no abscissa values stored)\n                   Field 4    - Abscissa minimum (0.0 if spacing uneven)\n                   Field 5    - Abscissa increment (0.0 if spacing uneven)\n                   Field 6    - Z-axis value (0.0 if unused)\n\n     Record 8:     Format(I10,3I5,2(1X,20A1))\n                              Abscissa Data Characteristics\n                   Field 1    - Specific Data Type\n                                0 - unknown\n                                1 - general\n                                2 - stress\n                                3 - strain\n                                5 - temperature\n                                6 - heat flux\n                                8 - displacement\n                                9 - reaction force\n                                11 - velocity\n                                12 - acceleration\n                                13 - excitation force\n                                15 - pressure\n                                16 - mass\n                                17 - time\n                                18 - frequency\n                                19 - rpm\n                                20 - order\n                   Field 2    - Length units exponent\n                   Field 3    - Force units exponent\n                   Field 4    - Temperature units exponent\n\n                    NOTE\n\n                       Fields 2, 3 and  4  are  relevant  only  if the\n                       Specific Data Type is General, or in the case of\n                       ordinates, the response/reference direction is a\n                       scalar, or the functions are being used for\n                       nonlinear connectors in System Dynamics Analysis.\n                       See Addendum 'A' for the units exponent table.\n\n                   Field 5    - Axis label (\"NONE\" if not used)\n                   Field 6    - Axis units label (\"NONE\" if not used)\n\n                    NOTE\n\n                       If fields  5  and  6  are  supplied,  they take\n                       precendence  over  program  generated labels and\n                       units.\n\n     Record 9:     Format(I10,3I5,2(1X,20A1))\n                   Ordinate (or ordinate numerator) Data Characteristics\n\n     Record 10:    Format(I10,3I5,2(1X,20A1))\n                   Ordinate Denominator Data Characteristics\n\n     Record 11:    Format(I10,3I5,2(1X,20A1))\n                   Z-axis Data Characteristics\n\n                    NOTE\n\n                       Records 9, 10, and 11 are  always  included and\n                       have fields the same as record 8.  If records 10\n                       and 11 are not used, set field 1 to zero.\n\n     Record 12:\n                               Data Values\n\n                     Ordinate            Abscissa\n         Case     Type     Precision     Spacing       Format\n       -------------------------------------------------------------\n           1      real      single        even         6E13.5\n           2      real      single       uneven        6E13.5\n           3     complex    single        even         6E13.5\n           4     complex    single       uneven        6E13.5\n           5      real      double        even         4E20.12\n           6      real      double       uneven     2(E13.5,E20.12)\n           7     complex    double        even         4E20.12\n           8     complex    double       uneven      E13.5,2E20.12\n       --------------------------------------------------------------\n\n        NOTE\n\n       See  Addendum  'B'  for  typical  FORTRAN   READ/WRITE\n       statements for each case.\n\n\n     General Notes:\n\n          1.  ID lines may not be blank.  If no  information  is required,\n              the word \"NONE\" must appear in columns 1 through 4.\n\n          2.  ID line 1 appears on plots in Finite Element Modeling and is\n              used as the function description in System Dynamics Analysis.\n\n          3.  Dataloaders use the following ID line conventions\n                 ID Line 1 - Model Identification\n                 ID Line 2 - Run Identification\n                 ID Line 3 - Run Date and Time\n                 ID Line 4 - Load Case Name\n\n          4.  Coordinates codes from MODAL-PLUS and MODALX are decoded into\n              node and direction.\n\n          5.  Entity names used in System Dynamics Analysis prior to I-DEAS\n              Level 5 have a 4 character maximum. Beginning with Level 5,\n              entity names will be ignored if this dataset is preceded by\n              dataset 259. If no dataset 259 precedes this dataset, then the\n              entity name will be assumed to exist in model bin number 1.\n\n          6.  Record 10 is ignored by System Dynamics Analysis unless load\n              case = 0. Record 11 is always ignored by System Dynamics\n              Analysis.\n\n          7.  In record 6, if the response or reference names are \"NONE\"\n              and are not overridden by a dataset 259, but the correspond-\n              ing node is non-zero, System Dynamics Analysis adds the node\n              and direction to the function description if space is sufficie\n\n          8.  ID line 1 appears on XY plots in Test Data Analysis along\n              with ID line 5 if it is defined.  If defined, the axis units\n              labels also appear on the XY plot instead of the normal\n              labeling based on the data type of the function.\n\n          9.  For functions used with nonlinear connectors in System\n              Dynamics Analysis, the following requirements must be\n              adhered to:\n\n              a) Record 6: For a displacement-dependent function, the\n                 function type must be 0; for a frequency-dependent\n                 function, it must be 4. In either case, the load case\n                 identification number must be 0.\n\n              b) Record 8: For a displacement-dependent function, the\n                 specific data type must be 8 and the length units\n                 exponent must be 0 or 1; for a frequency-dependent\n                 function, the specific data type must be 18 and the\n                 length units exponent must be 0. In either case, the\n                 other units exponents must be 0.\n\n              c) Record 9: The specific data type must be 13. The\n                 temperature units exponent must be 0. For an ordinate\n                 numerator of force, the length and force units\n                 exponents must be 0 and 1, respectively. For an\n                 ordinate numerator of moment, the length and force\n                 units exponents must be 1 and 1, respectively.\n\n              d) Record 10: The specific data type must be 8 for\n                 stiffness and hysteretic damping; it must be 11\n                 for viscous damping. For an ordinate denominator of\n                 translational displacement, the length units exponent\n                 must be 1; for a rotational displacement, it must\n                 be 0. The other units exponents must be 0.\n\n              e) Dataset 217 must precede each function in order to\n                 define the function's usage (i.e. stiffness, viscous\n                 damping, hysteretic damping).\n\n    Addendum A\n\n     In order to correctly perform units  conversion,  length,  force, and\n     temperature  exponents  must  be  supplied for a specific data type of\n     General; that is, Record 8 Field 1 = 1.  For example, if the function\n     has  the  physical dimensionality of Energy (Force * Length), then the\n     required exponents would be as follows:\n\n             Length = 1\n             Force = 1          Energy = L * F\n             Temperature = 0\n\n     Units exponents for the remaining specific data types  should not  be\n     supplied.  The following exponents will automatically be used.\n\n                          Table - Unit Exponents\n          -------------------------------------------------------\n           Specific                   Direction\n                    ---------------------------------------------\n             Data       Translational            Rotational\n                    ---------------------------------------------\n             Type    Length  Force  Temp    Length  Force  Temp\n          -------------------------------------------------------\n              0        0       0      0       0       0      0\n              1             (requires input to fields 2,3,4)\n              2       -2       1      0      -1       1      0\n              3        0       0      0       0       0      0\n              5        0       0      1       0       0      1\n              6        1       1      0       1       1      0\n              8        1       0      0       0       0      0\n              9        0       1      0       1       1      0\n             11        1       0      0       0       0      0\n             12        1       0      0       0       0      0\n             13        0       1      0       1       1      0\n             15       -2       1      0      -1       1      0\n             16       -1       1      0       1       1      0\n             17        0       0      0       0       0      0\n             18        0       0      0       0       0      0\n             19        0       0      0       0       0      0\n          --------------------------------------------------------\n\n            NOTE\n\n             Units exponents for scalar points are defined within\n             System Analysis prior to reading this dataset.\n\n    Addendum B\n\n     There are 8 distinct  combinations  of  parameters  which  affect the\n     details   of  READ/WRITE  operations.   The  parameters  involved are\n     Ordinate Data Type, Ordinate Data  Precision,  and  Abscissa Spacing.\n     Each  combination  is documented in the examples below.  In all cases,\n     the number of data values (for even abscissa spacing)  or  data pairs\n     (for  uneven  abscissa  spacing)  is NVAL.  The abcissa is always real\n     single precision.  Complex double precision is  handled  by  two real\n     double  precision  variables  (real  part  followed by imaginary part)\n     because most systems do not directly support complex double precision.\n\n     CASE 1\n\n     REAL\n     SINGLE PRECISION\n     EVEN SPACING\n\n       Order of data in file           Y1   Y2   Y3   Y4   Y5   Y6\n                                       Y7   Y8   Y9   Y10  Y11  Y12\n                                                  .\n                                                  .\n                                                  .\n       Input\n\n                 REAL Y(6)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 READ(LUN,1000,ERR=  ,END=  )(Y(I),I=1,6)\n            1000 FORMAT(6E13.5)\n                 NPRO=NPRO+6\n                   .\n                   .    code to process these six values\n                   .\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 REAL Y(6)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 CONTINUE\n                   .\n                   .    code to set up these six values\n                   .\n                 WRITE(LUN,1000,ERR=  )(Y(I),I=1,6)\n            1000 FORMAT(6E13.5)\n                 NPRO=NPRO+6\n\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 2\n\n     REAL\n     SINGLE PRECISION\n     UNEVEN SPACING\n\n       Order of data in file          X1   Y1   X2   Y2   X3   Y3\n                                      X4   Y4   X5   Y5   X6   Y6\n                                       .\n                                       .\n                                       .\n\n       Input\n\n                 REAL X(3),Y(3)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 READ(LUN,1000,ERR=  ,END=  )(X(I),Y(I),I=1,3)\n            1000 FORMAT(6E13.5)\n                 NPRO=NPRO+3\n                   .\n                   .    code to process these three values\n                   .\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 REAL X(3),Y(3)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 CONTINUE\n                   .\n                   .    code to set up these three values\n                   .\n                 WRITE(LUN,1000,ERR=  )(X(I),Y(I),I=1,3)\n            1000 FORMAT(6E13.5)\n                 NPRO=NPRO+3\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 3\n\n     COMPLEX\n     SINGLE PRECISION\n     EVEN SPACING\n\n       Order of data in file          RY1  IY1  RY2  IY2  RY3  IY3\n                                      RY4  IY4  RY5  IY5  RY6  IY6\n                                       .\n                                       .\n                                       .\n\n       Input\n\n                 COMPLEX Y(3)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 READ(LUN,1000,ERR=  ,END=  )(Y(I),I=1,3)\n            1000 FORMAT(6E13.5)\n                 NPRO=NPRO+3\n                   .\n                   .    code to process these six values\n                   .\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n\n       Output\n\n                 COMPLEX Y(3)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 CONTINUE\n                   .\n                   .    code to set up these three values\n                   .\n                 WRITE(LUN,1000,ERR=  )(Y(I),I=1,3)\n            1000 FORMAT(6E13.5)\n                 NPRO=NPRO+3\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 4\n\n     COMPLEX\n     SINGLE PRECISION\n     UNEVEN SPACING\n\n       Order of data in file          X1   RY1  IY1  X2  RY2  IY2\n                                      X3   RY3  IY3  X4  RY4  IY4\n\n                                       .\n                                       .\n                                       .\n\n       Input\n\n                 REAL X(2)\n                 COMPLEX Y(2)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 READ(LUN,1000,ERR=  ,END=  )(X(I),Y(I),I=1,2)\n            1000 FORMAT(6E13.5)\n                 NPRO=NPRO+2\n                   .\n                   .    code to process these two values\n                   .\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n      Output\n\n                 REAL X(2)\n                 COMPLEX Y(2)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 CONTINUE\n                   .\n                   .    code to set up these two values\n                   .\n                 WRITE(LUN,1000,ERR=  )(X(I),Y(I),I=1,2)\n            1000 FORMAT(6E13.5)\n                 NPRO=NPRO+2\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 5\n\n     REAL\n     DOUBLE PRECISION\n     EVEN SPACING\n\n       Order of data in file          Y1     Y2     Y3     Y4\n                                      Y5     Y6     Y7     Y8\n                                       .\n                                       .\n                                       .\n       Input\n\n                 DOUBLE PRECISION Y(4)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 READ(LUN,1000,ERR=  ,END=  )(Y(I),I=1,4)\n            1000 FORMAT(4E20.12)\n                 NPRO=NPRO+4\n                   .\n                   .    code to process these four values\n                   .\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 DOUBLE PRECISION Y(4)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 CONTINUE\n                   .\n                   .    code to set up these four values\n                   .\n                 WRITE(LUN,1000,ERR=  )(Y(I),I=1,4)\n            1000 FORMAT(4E20.12)\n                 NPRO=NPRO+4\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 6\n\n     REAL\n     DOUBLE PRECISION\n     UNEVEN SPACING\n\n       Order of data in file          X1   Y1     X2   Y2\n                                      X3   Y3     X4   Y4\n                                       .\n                                       .\n                                       .\n       Input\n\n                 REAL X(2)\n                 DOUBLE PRECISION Y(2)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 READ(LUN,1000,ERR=  ,END=  )(X(I),Y(I),I=1,2)\n            1000 FORMAT(2(E13.5,E20.12))\n                 NPRO=NPRO+2\n                   .\n                   .    code to process these two values\n                   .\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 REAL X(2)\n                 DOUBLE PRECISION Y(2)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 CONTINUE\n                   .\n                   .    code to set up these two values\n                   .\n                 WRITE(LUN,1000,ERR=  )(X(I),Y(I),I=1,2)\n            1000 FORMAT(2(E13.5,E20.12))\n                 NPRO=NPRO+2\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n     CASE 7\n\n     COMPLEX\n     DOUBLE PRECISION\n     EVEN SPACING\n\n       Order of data in file          RY1    IY1    RY2    IY2\n                                      RY3    IY3    RY4    IY4\n                                       .\n                                       .\n                                       .\n\n       Input\n\n                 DOUBLE PRECISION Y(2,2)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 READ(LUN,1000,ERR=  ,END=  )((Y(I,J),I=1,2),J=1,2)\n            1000 FORMAT(4E20.12)\n                 NPRO=NPRO+2\n                   .\n                   .    code to process these two values\n                   .\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 DOUBLE PRECISION Y(2,2)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 CONTINUE\n                   .\n                   .    code to set up these two values\n                   .\n                 WRITE(LUN,1000,ERR=  )((Y(I,J),I=1,2),J=1,2)\n            1000 FORMAT(4E20.12)\n                 NPRO=NPRO+2\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n     CASE 8\n\n     COMPLEX\n     DOUBLE PRECISION\n     UNEVEN SPACING\n\n       Order of data in file          X1   RY1    IY1\n                                      X2   RY2    IY2\n                                       .\n                                       .\n                                       .\n       Input\n\n                 REAL X\n                 DOUBLE PRECISION Y(2)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 READ(LUN,1000,ERR=  ,END=  )(X,Y(I),I=1,2)\n            1000 FORMAT(E13.5,2E20.12)\n                 NPRO=NPRO+1\n                   .\n                   .    code to process this value\n                   .\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\n       Output\n\n                 REAL X\n                 DOUBLE PRECISION Y(2)\n                   .\n                   .\n                   .\n                 NPRO=0\n              10 CONTINUE\n                   .\n                   .    code to set up this value\n                   .\n                 WRITE(LUN,1000,ERR=  )(X,Y(I),I=1,2)\n            1000 FORMAT(E13.5,2E20.12)\n                 NPRO=NPRO+1\n                 IF(NPRO.LT.NVAL)GO TO 10\n                   .\n                   .   continued processing\n                   .\n\\end{verbatim}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "5",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## API\n",
                "\n",
                "::: {.api}"
            ]
        },
        {
            "id": "6",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| echo: false\n",
                "@doc Dataset58"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "  \u001b[36mDataset58\u001b[39m\n\n  A struct containing UFF Dataset 58 metadata.\n\n  \u001b[1mFields\u001b[22m\n\n    \u001b[34m• \u001b[39m \u001b[36mtype::Symbol\u001b[39m: Data set type\n    \u001b[34m• \u001b[39m \u001b[36mid1::String\u001b[39m: ID line 1\n    \u001b[34m• \u001b[39m \u001b[36mid2::String\u001b[39m: ID line 2\n    \u001b[34m• \u001b[39m \u001b[36mid3::String\u001b[39m: ID line 3\n    \u001b[34m• \u001b[39m \u001b[36mid4::String\u001b[39m: ID line 4\n    \u001b[34m• \u001b[39m \u001b[36mid5::String\u001b[39m: ID line 5\n    \u001b[34m• \u001b[39m \u001b[36mfunc_type::Int\u001b[39m: Function type\n    \u001b[34m• \u001b[39m \u001b[36mfunc_id::Int\u001b[39m: Function ID\n    \u001b[34m• \u001b[39m \u001b[36mver_num::Int\u001b[39m: Version number\n    \u001b[34m• \u001b[39m \u001b[36mload_case::Int\u001b[39m: Load case\n    \u001b[34m• \u001b[39m \u001b[36mresp_name::String\u001b[39m: Response name\n    \u001b[34m• \u001b[39m \u001b[36mresp_node::Int\u001b[39m: Response node\n    \u001b[34m• \u001b[39m \u001b[36mresp_dir::Int\u001b[39m: Response direction\n    \u001b[34m• \u001b[39m \u001b[36mref_name::String\u001b[39m: Reference name\n    \u001b[34m• \u001b[39m \u001b[36mref_node::Int\u001b[39m: Reference node\n    \u001b[34m• \u001b[39m \u001b[36mref_dir::Int\u001b[39m: Reference direction\n    \u001b[34m• \u001b[39m \u001b[36mord_dtype::Int\u001b[39m: Ordinate data type\n    \u001b[34m• \u001b[39m \u001b[36mnum_pts::Int\u001b[39m: Number of points\n    \u001b[34m• \u001b[39m \u001b[36mabs_spacing_type::Int\u001b[39m: Abscissa spacing type\n    \u001b[34m• \u001b[39m \u001b[36mabs_start::Float64\u001b[39m: Abscissa start\n    \u001b[34m• \u001b[39m \u001b[36mabs_increment::Float64\u001b[39m: Abscissa increment\n    \u001b[34m• \u001b[39m \u001b[36mzval::Float64\u001b[39m: Z-axis value\n    \u001b[34m• \u001b[39m \u001b[36mabs_spec_dtype::Int\u001b[39m: Abscissa specification data type\n    \u001b[34m• \u001b[39m \u001b[36mabs_len_unit_exp::Int\u001b[39m: Abscissa length unit exponent\n    \u001b[34m• \u001b[39m \u001b[36mabs_force_unit_exp::Int\u001b[39m: Abscissa force unit exponent\n    \u001b[34m• \u001b[39m \u001b[36mabs_temp_unit_exp::Int\u001b[39m: Abscissa temperature unit exponent\n    \u001b[34m• \u001b[39m \u001b[36mabs_axis_label::String\u001b[39m: Abscissa axis label\n    \u001b[34m• \u001b[39m \u001b[36mabs_axis_unit_label::String\u001b[39m: Abscissa axis unit label\n    \u001b[34m• \u001b[39m \u001b[36mord_spec_dtype::Int\u001b[39m: Ordinate specification data type\n    \u001b[34m• \u001b[39m \u001b[36mord_len_unit_exp::Int\u001b[39m: Ordinate length unit exponent\n    \u001b[34m• \u001b[39m \u001b[36mord_force_unit_exp::Int\u001b[39m: Ordinate force unit exponent\n    \u001b[34m• \u001b[39m \u001b[36mord_temp_unit_exp::Int\u001b[39m: Ordinate temperature unit exponent\n    \u001b[34m• \u001b[39m \u001b[36mord_axis_label::String\u001b[39m: Ordinate axis label\n    \u001b[34m• \u001b[39m \u001b[36mord_axis_unit_label::String\u001b[39m: Ordinate axis unit label\n    \u001b[34m• \u001b[39m \u001b[36mord_denom_spec_dtype::Int\u001b[39m: Ordinate denominator specification data\n       type\n    \u001b[34m• \u001b[39m \u001b[36mord_denom_len_unit_exp::Int\u001b[39m: Ordinate denominator length unit\n       exponent\n    \u001b[34m• \u001b[39m \u001b[36mord_denom_force_unit_exp::Int\u001b[39m: Ordinate denominator force unit\n       exponent\n    \u001b[34m• \u001b[39m \u001b[36mord_denom_temp_unit_exp::Int\u001b[39m: Ordinate denominator temperature\n       unit exponent\n    \u001b[34m• \u001b[39m \u001b[36mord_denom_axis_label::String\u001b[39m: Ordinate denominator axis label\n    \u001b[34m• \u001b[39m \u001b[36mord_denom_axis_unit_label::String\u001b[39m: Ordinate denominator axis unit\n       label\n    \u001b[34m• \u001b[39m \u001b[36mz_spec_dtype::Int\u001b[39m: Z-axis specification data type\n    \u001b[34m• \u001b[39m \u001b[36mz_len_unit_exp::Int\u001b[39m: Z-axis length unit exponent\n    \u001b[34m• \u001b[39m \u001b[36mz_force_unit_exp::Int\u001b[39m: Z-axis force unit exponent\n    \u001b[34m• \u001b[39m \u001b[36mz_temp_unit_exp::Int\u001b[39m: Z-axis temperature unit exponent\n    \u001b[34m• \u001b[39m \u001b[36mz_axis_label::String\u001b[39m: Z-axis label\n    \u001b[34m• \u001b[39m \u001b[36mz_axis_unit_label::String\u001b[39m: Z-axis unit label\n    \u001b[34m• \u001b[39m \u001b[36mdata::AbstractVector\u001b[39m: Data values",
                        "text/markdown": "```julia\nDataset58\n```\n\nA struct containing UFF Dataset 58 metadata.\n\n**Fields**\n\n  * `type::Symbol`: Data set type\n  * `id1::String`: ID line 1\n  * `id2::String`: ID line 2\n  * `id3::String`: ID line 3\n  * `id4::String`: ID line 4\n  * `id5::String`: ID line 5\n  * `func_type::Int`: Function type\n  * `func_id::Int`: Function ID\n  * `ver_num::Int`: Version number\n  * `load_case::Int`: Load case\n  * `resp_name::String`: Response name\n  * `resp_node::Int`: Response node\n  * `resp_dir::Int`: Response direction\n  * `ref_name::String`: Reference name\n  * `ref_node::Int`: Reference node\n  * `ref_dir::Int`: Reference direction\n  * `ord_dtype::Int`: Ordinate data type\n  * `num_pts::Int`: Number of points\n  * `abs_spacing_type::Int`: Abscissa spacing type\n  * `abs_start::Float64`: Abscissa start\n  * `abs_increment::Float64`: Abscissa increment\n  * `zval::Float64`: Z-axis value\n  * `abs_spec_dtype::Int`: Abscissa specification data type\n  * `abs_len_unit_exp::Int`: Abscissa length unit exponent\n  * `abs_force_unit_exp::Int`: Abscissa force unit exponent\n  * `abs_temp_unit_exp::Int`: Abscissa temperature unit exponent\n  * `abs_axis_label::String`: Abscissa axis label\n  * `abs_axis_unit_label::String`: Abscissa axis unit label\n  * `ord_spec_dtype::Int`: Ordinate specification data type\n  * `ord_len_unit_exp::Int`: Ordinate length unit exponent\n  * `ord_force_unit_exp::Int`: Ordinate force unit exponent\n  * `ord_temp_unit_exp::Int`: Ordinate temperature unit exponent\n  * `ord_axis_label::String`: Ordinate axis label\n  * `ord_axis_unit_label::String`: Ordinate axis unit label\n  * `ord_denom_spec_dtype::Int`: Ordinate denominator specification data type\n  * `ord_denom_len_unit_exp::Int`: Ordinate denominator length unit exponent\n  * `ord_denom_force_unit_exp::Int`: Ordinate denominator force unit exponent\n  * `ord_denom_temp_unit_exp::Int`: Ordinate denominator temperature unit exponent\n  * `ord_denom_axis_label::String`: Ordinate denominator axis label\n  * `ord_denom_axis_unit_label::String`: Ordinate denominator axis unit label\n  * `z_spec_dtype::Int`: Z-axis specification data type\n  * `z_len_unit_exp::Int`: Z-axis length unit exponent\n  * `z_force_unit_exp::Int`: Z-axis force unit exponent\n  * `z_temp_unit_exp::Int`: Z-axis temperature unit exponent\n  * `z_axis_label::String`: Z-axis label\n  * `z_axis_unit_label::String`: Z-axis unit label\n  * `data::AbstractVector`: Data values\n",
                        "text/html": "<div class=\"markdown\"><pre><code class=\"language-julia\">Dataset58</code></pre>\n<p>A struct containing UFF Dataset 58 metadata.</p>\n<p><strong>Fields</strong></p>\n<ul>\n<li><p><code>type::Symbol</code>: Data set type</p>\n</li>\n<li><p><code>id1::String</code>: ID line 1</p>\n</li>\n<li><p><code>id2::String</code>: ID line 2</p>\n</li>\n<li><p><code>id3::String</code>: ID line 3</p>\n</li>\n<li><p><code>id4::String</code>: ID line 4</p>\n</li>\n<li><p><code>id5::String</code>: ID line 5</p>\n</li>\n<li><p><code>func_type::Int</code>: Function type</p>\n</li>\n<li><p><code>func_id::Int</code>: Function ID</p>\n</li>\n<li><p><code>ver_num::Int</code>: Version number</p>\n</li>\n<li><p><code>load_case::Int</code>: Load case</p>\n</li>\n<li><p><code>resp_name::String</code>: Response name</p>\n</li>\n<li><p><code>resp_node::Int</code>: Response node</p>\n</li>\n<li><p><code>resp_dir::Int</code>: Response direction</p>\n</li>\n<li><p><code>ref_name::String</code>: Reference name</p>\n</li>\n<li><p><code>ref_node::Int</code>: Reference node</p>\n</li>\n<li><p><code>ref_dir::Int</code>: Reference direction</p>\n</li>\n<li><p><code>ord_dtype::Int</code>: Ordinate data type</p>\n</li>\n<li><p><code>num_pts::Int</code>: Number of points</p>\n</li>\n<li><p><code>abs_spacing_type::Int</code>: Abscissa spacing type</p>\n</li>\n<li><p><code>abs_start::Float64</code>: Abscissa start</p>\n</li>\n<li><p><code>abs_increment::Float64</code>: Abscissa increment</p>\n</li>\n<li><p><code>zval::Float64</code>: Z-axis value</p>\n</li>\n<li><p><code>abs_spec_dtype::Int</code>: Abscissa specification data type</p>\n</li>\n<li><p><code>abs_len_unit_exp::Int</code>: Abscissa length unit exponent</p>\n</li>\n<li><p><code>abs_force_unit_exp::Int</code>: Abscissa force unit exponent</p>\n</li>\n<li><p><code>abs_temp_unit_exp::Int</code>: Abscissa temperature unit exponent</p>\n</li>\n<li><p><code>abs_axis_label::String</code>: Abscissa axis label</p>\n</li>\n<li><p><code>abs_axis_unit_label::String</code>: Abscissa axis unit label</p>\n</li>\n<li><p><code>ord_spec_dtype::Int</code>: Ordinate specification data type</p>\n</li>\n<li><p><code>ord_len_unit_exp::Int</code>: Ordinate length unit exponent</p>\n</li>\n<li><p><code>ord_force_unit_exp::Int</code>: Ordinate force unit exponent</p>\n</li>\n<li><p><code>ord_temp_unit_exp::Int</code>: Ordinate temperature unit exponent</p>\n</li>\n<li><p><code>ord_axis_label::String</code>: Ordinate axis label</p>\n</li>\n<li><p><code>ord_axis_unit_label::String</code>: Ordinate axis unit label</p>\n</li>\n<li><p><code>ord_denom_spec_dtype::Int</code>: Ordinate denominator specification data type</p>\n</li>\n<li><p><code>ord_denom_len_unit_exp::Int</code>: Ordinate denominator length unit exponent</p>\n</li>\n<li><p><code>ord_denom_force_unit_exp::Int</code>: Ordinate denominator force unit exponent</p>\n</li>\n<li><p><code>ord_denom_temp_unit_exp::Int</code>: Ordinate denominator temperature unit exponent</p>\n</li>\n<li><p><code>ord_denom_axis_label::String</code>: Ordinate denominator axis label</p>\n</li>\n<li><p><code>ord_denom_axis_unit_label::String</code>: Ordinate denominator axis unit label</p>\n</li>\n<li><p><code>z_spec_dtype::Int</code>: Z-axis specification data type</p>\n</li>\n<li><p><code>z_len_unit_exp::Int</code>: Z-axis length unit exponent</p>\n</li>\n<li><p><code>z_force_unit_exp::Int</code>: Z-axis force unit exponent</p>\n</li>\n<li><p><code>z_temp_unit_exp::Int</code>: Z-axis temperature unit exponent</p>\n</li>\n<li><p><code>z_axis_label::String</code>: Z-axis label</p>\n</li>\n<li><p><code>z_axis_unit_label::String</code>: Z-axis unit label</p>\n</li>\n<li><p><code>data::AbstractVector</code>: Data values</p>\n</li>\n</ul>\n\n\n</div>",
                        "text/latex": "\\begin{verbatim}\nDataset58\n\\end{verbatim}\nA struct containing UFF Dataset 58 metadata.\n\n\\textbf{Fields}\n\n\\begin{itemize}\n\\item \\texttt{type::Symbol}: Data set type\n\n\n\\item \\texttt{id1::String}: ID line 1\n\n\n\\item \\texttt{id2::String}: ID line 2\n\n\n\\item \\texttt{id3::String}: ID line 3\n\n\n\\item \\texttt{id4::String}: ID line 4\n\n\n\\item \\texttt{id5::String}: ID line 5\n\n\n\\item \\texttt{func\\_type::Int}: Function type\n\n\n\\item \\texttt{func\\_id::Int}: Function ID\n\n\n\\item \\texttt{ver\\_num::Int}: Version number\n\n\n\\item \\texttt{load\\_case::Int}: Load case\n\n\n\\item \\texttt{resp\\_name::String}: Response name\n\n\n\\item \\texttt{resp\\_node::Int}: Response node\n\n\n\\item \\texttt{resp\\_dir::Int}: Response direction\n\n\n\\item \\texttt{ref\\_name::String}: Reference name\n\n\n\\item \\texttt{ref\\_node::Int}: Reference node\n\n\n\\item \\texttt{ref\\_dir::Int}: Reference direction\n\n\n\\item \\texttt{ord\\_dtype::Int}: Ordinate data type\n\n\n\\item \\texttt{num\\_pts::Int}: Number of points\n\n\n\\item \\texttt{abs\\_spacing\\_type::Int}: Abscissa spacing type\n\n\n\\item \\texttt{abs\\_start::Float64}: Abscissa start\n\n\n\\item \\texttt{abs\\_increment::Float64}: Abscissa increment\n\n\n\\item \\texttt{zval::Float64}: Z-axis value\n\n\n\\item \\texttt{abs\\_spec\\_dtype::Int}: Abscissa specification data type\n\n\n\\item \\texttt{abs\\_len\\_unit\\_exp::Int}: Abscissa length unit exponent\n\n\n\\item \\texttt{abs\\_force\\_unit\\_exp::Int}: Abscissa force unit exponent\n\n\n\\item \\texttt{abs\\_temp\\_unit\\_exp::Int}: Abscissa temperature unit exponent\n\n\n\\item \\texttt{abs\\_axis\\_label::String}: Abscissa axis label\n\n\n\\item \\texttt{abs\\_axis\\_unit\\_label::String}: Abscissa axis unit label\n\n\n\\item \\texttt{ord\\_spec\\_dtype::Int}: Ordinate specification data type\n\n\n\\item \\texttt{ord\\_len\\_unit\\_exp::Int}: Ordinate length unit exponent\n\n\n\\item \\texttt{ord\\_force\\_unit\\_exp::Int}: Ordinate force unit exponent\n\n\n\\item \\texttt{ord\\_temp\\_unit\\_exp::Int}: Ordinate temperature unit exponent\n\n\n\\item \\texttt{ord\\_axis\\_label::String}: Ordinate axis label\n\n\n\\item \\texttt{ord\\_axis\\_unit\\_label::String}: Ordinate axis unit label\n\n\n\\item \\texttt{ord\\_denom\\_spec\\_dtype::Int}: Ordinate denominator specification data type\n\n\n\\item \\texttt{ord\\_denom\\_len\\_unit\\_exp::Int}: Ordinate denominator length unit exponent\n\n\n\\item \\texttt{ord\\_denom\\_force\\_unit\\_exp::Int}: Ordinate denominator force unit exponent\n\n\n\\item \\texttt{ord\\_denom\\_temp\\_unit\\_exp::Int}: Ordinate denominator temperature unit exponent\n\n\n\\item \\texttt{ord\\_denom\\_axis\\_label::String}: Ordinate denominator axis label\n\n\n\\item \\texttt{ord\\_denom\\_axis\\_unit\\_label::String}: Ordinate denominator axis unit label\n\n\n\\item \\texttt{z\\_spec\\_dtype::Int}: Z-axis specification data type\n\n\n\\item \\texttt{z\\_len\\_unit\\_exp::Int}: Z-axis length unit exponent\n\n\n\\item \\texttt{z\\_force\\_unit\\_exp::Int}: Z-axis force unit exponent\n\n\n\\item \\texttt{z\\_temp\\_unit\\_exp::Int}: Z-axis temperature unit exponent\n\n\n\\item \\texttt{z\\_axis\\_label::String}: Z-axis label\n\n\n\\item \\texttt{z\\_axis\\_unit\\_label::String}: Z-axis unit label\n\n\n\\item \\texttt{data::AbstractVector}: Data values\n\n\\end{itemize}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "7",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                ":::"
            ]
        }
    ],
    "timestamp": "2025-10-31T12:44:49.412",
    "file": "/Users/maucejo/Documents/01_Recherche/04_Projets/Codes/Julia/UFFio/docs/datasets/dataset58.qmd",
    "qnr_schema_version": "1.0.0"
}