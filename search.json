[
  {
    "objectID": "overview/installation.html",
    "href": "overview/installation.html",
    "title": "Installation",
    "section": "",
    "text": "Note\n\n\n\nIf you are already a Julia user, you can skip this section.\nThis section explains how to install Julia and Vibration.jl.",
    "crumbs": [
      "Overview",
      "Installation"
    ]
  },
  {
    "objectID": "overview/installation.html#install-julia",
    "href": "overview/installation.html#install-julia",
    "title": "Installation",
    "section": "Install Julia ",
    "text": "Install Julia \nThere exists several ways of installing Julia and managing versions. The recommended way consists in installing juliaup, which is a Julia version manager.\n\nWindows\nOn Windows, juliaup can be installed directly from the Windows store or from a terminal by typing the following command:\nwinget install julia -s msstore\nMacOS and Linux\nOn MacOS and Linux, juliaup can be installed from a terminal by typing:\ncurl -fsSL https://install.julialang.org | sh\nor by using software repositories:\n# MacOS\nbrew install juliaup\n\n# Arch-based distributions\nyay -S juliaup\n\nOnce juliaup is installed, the latest version of Julia can be installed from a terminal as follows:\njuliaup add release",
    "crumbs": [
      "Overview",
      "Installation"
    ]
  },
  {
    "objectID": "overview/installation.html#install-vibrationdata.jl",
    "href": "overview/installation.html#install-vibrationdata.jl",
    "title": "Installation",
    "section": "Install VibrationData.jl ",
    "text": "Install VibrationData.jl \nThe package is registered in the Julia General Registry. So, to install the package, you can use the following command:\n(Yourenv) pkg&gt; add StructuralVibration",
    "crumbs": [
      "Overview",
      "Installation"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "StructuralVibration.jl",
    "section": "",
    "text": "StructuralVibration.jl is a Julia package designed to generate vibration data for mechanical systems. This package can be used for educational and research purposes. As a teacher, you can use it to illustrate vibration theory and its practical implementation. As a researcher, you can use it to test new methods on synthetic data.",
    "crumbs": [
      "Overview",
      "StructuralVibration.jl"
    ]
  },
  {
    "objectID": "index.html#features",
    "href": "index.html#features",
    "title": "StructuralVibration.jl",
    "section": "Features",
    "text": "Features\nThe package provides the following features:\n\nMechanical models\n\nDiscrete models\n\nSpring-mass-damper SDOF system\nSpring-mass-damper MDOF system\nFE models of bar, rod, strings and beams\n\nContinuous models\n\nLongitudinal bars\nTorsional bars\nStrings\nBeams\nRectangular plates\nRectangular membranes\n\nState space model\n\nContinuous state-space representation\nDiscrete state-space representation\n\nZero-order hold (ZOH)\nFirst-order hold (FOH)\nBand-limited hold (BLH)\nRK4\n\n\n\n\n\nVibration data generation\n\nExcitation signals\n\nRectangular wave\nTriangular wave\nHammer impact\nSmoothed rectangular wave\nSine wave\nHalf-sine pulse\nHarversine pulse\nSwept sine wave\nGaussian pulse\nColored noise\n\nSolution for SDOF systems\n\nFree response\nForced response due to a harmonic force or a base motion\nForced response due to any external force or base motion (Duhamel’s integral)\n\nTime-domain integration schemes for linear second order systems\n\nCentral difference scheme\nRK4\nNewmark-beta method\nLinear acceleration method\nFox-Goodwin method\nHHT\nWBZ\nGeneralized-alpha\nMid-Point rule\n\nFrequency-domain calculations for linear systems\n\nFrequency spectrum\n\nModal summation\nDirect method\n\nFrequency response function (FRF)\n\nModal summation\nDirect method\n\n\nState-space solvers\n\nTime domain\n\nRK4 for continuous systems\nZOH, FOH, BLH, RK4 for discrete models\n\nFrequency spectrum\n\nModal summation\nDirect method\n\nFrequency response function (FRF)\n\nModal summation\nDirect method\n\n\nMeasurement noise\n\nAdditive Gaussian white noise (agwn) with a prescribed SNR\nAdditive Colored noise (acn)\nMultiplicative noise\nMixed - agwn + multiplicative noise\n\n\n\n\nSignal processing\n\nMeasurement noise variance estimation algorithms from noisy data\n\nRegularization-based estimation\nD’Errico’s method - Link to the Matlab version\nSNR estimation from estimated measurement noise variance\n\nDenoising algorithms\n\nRegularization\nKalman filtering\n\nSignal preprocessing\n\nDetrending data using polynomial fit\nGradient calculation using interpolation\n\nSignal estimation\n\nTransfer functions estimation (H1, H2, H3, Hv)\nWelch method (PSD, ESD, Autopower, Autopower linear)\nSignal spectrum estimation\n\n\n\n\nModal analysis\n\nModal extraction - SDOF methods\n\nPeak picking method\nCircle fit method\nLeast-squares fit method\n\nModal extraction - MDOF methods\n\nLeast-squares complex exponential (LSCE)\nLeast-squares complex frequency (LSCF)\nPolyreference least-squares complex frequency (PLSCF)\nStabilization diagram\n\nAnalysis indicators\n\nModal Overlap Factor (MOF)\nMode overcomplexity value (MOV)\nMode Phase Collinearity (MPC)\nMode Complexity Factor (MCF)\nMean Phase Deviation (MPD)\nModal Assurance Criterion (MAC)\nCoordinate Modal Assurance Criterion (COMAC)\nEnhanced Coordinate Modal Assurance Criterion (ECOMAC)\nFrequency Response Assurance Criterion (FRAC)\nComplex Mode Indicator Function (CMIF)\nPower Spectrum indicator function (PSIF)\n\nModal synthesis\n\nEstimation of the FRF residuals\nReconstruct FRF from modal parameters\n\n\n\n\nVisualization\n\nBode plot\n2D and 3D Nyquist plot\nWaterfall plot\nGeneral 2D plot",
    "crumbs": [
      "Overview",
      "StructuralVibration.jl"
    ]
  },
  {
    "objectID": "index.html#reproducibility",
    "href": "index.html#reproducibility",
    "title": "StructuralVibration.jl",
    "section": "Reproducibility",
    "text": "Reproducibility\n\n\n\n\n\n\nProject direct dependencies\n\n\n\n\n\nProject StructuralVibration v1.0.0\nStatus\n  [717857b8] DSP v0.8.4\n  [7a1cc6ca] FFTW v1.10.0\n  [442a2c76] FastGaussQuadrature v1.0.2\n  [a98d9a8b] Interpolations v0.15.1\n  [37e2e46d] LinearAlgebra v1.12.0\n  [429524aa] Optim v1.13.2\n  [18e31ff7] Peaks v0.5.3\n  [f27b6e38] Polynomials v4.1.0\n  [aea7be01] PrecompileTools v1.3.3\n  [92933f4c] ProgressMeter v1.11.0\n  [9a3f8284] Random v1.11.0\n  [276daf66] SpecialFunctions v2.6.1\n  [10745b16] Statistics v1.11.1\n  [c751599d] ToeplitzMatrices v0.8.5\n\n\n\n\n\n\n\n\n\nJulia version and machine information\n\n\n\n\n\nJulia Version 1.12.0\nCommit b907bd0600f (2025-10-07 15:42 UTC)\nBuild Info:\n  Official https://julialang.org release\nPlatform Info:\n  OS: macOS (arm64-apple-darwin22.4.0)\n  CPU: 16 × Apple M4 Max\n  WORD_SIZE: 64\n  LLVM: libLLVM-18.1.7 (ORCJIT, apple-m4)\n  GC: Built with stock GC\nThreads: 1 default, 1 interactive, 1 GC (on 12 virtual cores)\nEnvironment:\n  JULIA_EDITOR = code\n  JULIA_VSCODE_REPL = 1\n  JULIA_PKG_SERVER = https://juliahub.com",
    "crumbs": [
      "Overview",
      "StructuralVibration.jl"
    ]
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "StructuralVibration.jl",
    "section": "License",
    "text": "License\nThis package is under MIT License.",
    "crumbs": [
      "Overview",
      "StructuralVibration.jl"
    ]
  },
  {
    "objectID": "overview/release_notes.html",
    "href": "overview/release_notes.html",
    "title": "Release Notes",
    "section": "",
    "text": "Breaking changes\n\nSdof solvers\n\nRefactor SdofHarmonicTimeProblem, SdofForcedTimeProblem and SdofFrequencyProblem to comply with DifferentialEquations.jl conventions\n\nSignal processing\n\nAdd csd function to compute the Cross Spectral Density (CSD) between two signals or between multiple input and output signals\nAdd support for matrix inputs in tfestimate function to compute the Frequency Response Function (FRF) between multiple input and output signals\nRefactor tfestimate, welch, csd and spectrum functions to accept window functions instead of pre-computed window vectors\nAdd nfft parameter to tfestimate, welch, csd and spectrum functions to specify the number of FFT points to be used\n\nModal extraction\n\nAdd LSFit() method for modal parameter extraction using least squares fitting of the frequency response function around the resonance peak\nAdd AutoEMASdofProblem and AutoEMAMdofProblem structures and solve functions to perform automatic modal extraction based on Sdof or Mdof approximations\nSolutions of AutoEMA problems are stored in EMASdofSolution or EMAMdofSolution structures containing the poles and the modal parameters\nAdd poles_extraction function to extract system poles using different Mdof methods:\n\nLeast-Squares Complex Exponential (LSCE) method\nLeast-Squares Complex Frequency-domain (LSCF) method\nPolyreference Least-Squares Complex Frequency-domain (pLSCF) method\n\nAdd modeshape_extraction function to extract mode shapes from residues and poles using Mdof methods\nAdd stabilization function to perform stabilization diagram analysis using Mdof methods\nAdd stabilization_plot function to visualize stabilization diagrams\nStabilization results are now stored in the EMAMdofStabilization structure for plotting and further analysis\nAdd frf_reconstruction function to reconstruct FRFs from extracted modal parameters\nAdd compute_residuals function to compute the lower and upper residuals of the FRF\nAdd mode2residues function to compute residues from real modes information\nAdd modal extraction indicators:\n\nModal Overlap Factor (MOF)\nMode Overcomplexity Value (MOV)\nMode Phase Collinearity (MPC)\nMode Complexity Factor (MCF)\nMode Phase Deviation (MPD)\nModal Scale Factor (MSF)\nModal Assurance Criterion (MAC)\nCoordinate Modal Assurance Criterion (COMAC)\nEnhanced Coordinate Modal Assurance Criterion (ECOMAC)\nFrequency Response Assurance Criterion (FRAC)\nComplex Mode Indicator Function (CMIF)\nPower Spectrum Indicator Function (PSIF)\n\nUtils\n\nAdd modal2poles and poles2modal functions to convert between modal parameters and system poles",
    "crumbs": [
      "Overview",
      "Release Notes"
    ]
  },
  {
    "objectID": "overview/release_notes.html#v1.0.0",
    "href": "overview/release_notes.html#v1.0.0",
    "title": "Release Notes",
    "section": "",
    "text": "Breaking changes\n\nSdof solvers\n\nRefactor SdofHarmonicTimeProblem, SdofForcedTimeProblem and SdofFrequencyProblem to comply with DifferentialEquations.jl conventions\n\nSignal processing\n\nAdd csd function to compute the Cross Spectral Density (CSD) between two signals or between multiple input and output signals\nAdd support for matrix inputs in tfestimate function to compute the Frequency Response Function (FRF) between multiple input and output signals\nRefactor tfestimate, welch, csd and spectrum functions to accept window functions instead of pre-computed window vectors\nAdd nfft parameter to tfestimate, welch, csd and spectrum functions to specify the number of FFT points to be used\n\nModal extraction\n\nAdd LSFit() method for modal parameter extraction using least squares fitting of the frequency response function around the resonance peak\nAdd AutoEMASdofProblem and AutoEMAMdofProblem structures and solve functions to perform automatic modal extraction based on Sdof or Mdof approximations\nSolutions of AutoEMA problems are stored in EMASdofSolution or EMAMdofSolution structures containing the poles and the modal parameters\nAdd poles_extraction function to extract system poles using different Mdof methods:\n\nLeast-Squares Complex Exponential (LSCE) method\nLeast-Squares Complex Frequency-domain (LSCF) method\nPolyreference Least-Squares Complex Frequency-domain (pLSCF) method\n\nAdd modeshape_extraction function to extract mode shapes from residues and poles using Mdof methods\nAdd stabilization function to perform stabilization diagram analysis using Mdof methods\nAdd stabilization_plot function to visualize stabilization diagrams\nStabilization results are now stored in the EMAMdofStabilization structure for plotting and further analysis\nAdd frf_reconstruction function to reconstruct FRFs from extracted modal parameters\nAdd compute_residuals function to compute the lower and upper residuals of the FRF\nAdd mode2residues function to compute residues from real modes information\nAdd modal extraction indicators:\n\nModal Overlap Factor (MOF)\nMode Overcomplexity Value (MOV)\nMode Phase Collinearity (MPC)\nMode Complexity Factor (MCF)\nMode Phase Deviation (MPD)\nModal Scale Factor (MSF)\nModal Assurance Criterion (MAC)\nCoordinate Modal Assurance Criterion (COMAC)\nEnhanced Coordinate Modal Assurance Criterion (ECOMAC)\nFrequency Response Assurance Criterion (FRAC)\nComplex Mode Indicator Function (CMIF)\nPower Spectrum Indicator Function (PSIF)\n\nUtils\n\nAdd modal2poles and poles2modal functions to convert between modal parameters and system poles",
    "crumbs": [
      "Overview",
      "Release Notes"
    ]
  },
  {
    "objectID": "overview/release_notes.html#v0.3.0",
    "href": "overview/release_notes.html#v0.3.0",
    "title": "Release Notes",
    "section": "v0.3.0",
    "text": "v0.3.0\nBreaking change\n\nModify the implementation of the force window following PR #5. Thanks to @JakeZw for proposing this PR.",
    "crumbs": [
      "Overview",
      "Release Notes"
    ]
  },
  {
    "objectID": "overview/release_notes.html#v0.2.0",
    "href": "overview/release_notes.html#v0.2.0",
    "title": "Release Notes",
    "section": "v0.2.0",
    "text": "v0.2.0\nBreaking change\n\nRefactor of the visualization extension following issue #3. Theming has been removed from the plotting functions (function theme_choice is now exported).",
    "crumbs": [
      "Overview",
      "Release Notes"
    ]
  },
  {
    "objectID": "overview/release_notes.html#v0.1.2",
    "href": "overview/release_notes.html#v0.1.2",
    "title": "Release Notes",
    "section": "v0.1.2",
    "text": "v0.1.2\n\nBug fix in OneDMesh (solved issue #2)",
    "crumbs": [
      "Overview",
      "Release Notes"
    ]
  },
  {
    "objectID": "overview/release_notes.html#v0.1.1",
    "href": "overview/release_notes.html#v0.1.1",
    "title": "Release Notes",
    "section": "v0.1.1",
    "text": "v0.1.1\n\nBug fixes in State space solvers",
    "crumbs": [
      "Overview",
      "Release Notes"
    ]
  },
  {
    "objectID": "overview/release_notes.html#v0.1.0",
    "href": "overview/release_notes.html#v0.1.0",
    "title": "Release Notes",
    "section": "v0.1.0",
    "text": "v0.1.0\n\nInitial release of the package",
    "crumbs": [
      "Overview",
      "Release Notes"
    ]
  }
]